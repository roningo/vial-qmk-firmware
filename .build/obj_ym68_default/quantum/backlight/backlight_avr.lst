   1               		.file	"backlight_avr.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.cie_lightness,"ax",@progbits
  12               	cie_lightness:
  13               	.LVL0:
  14               	.LFB26:
  15               		.file 1 "quantum/backlight/backlight_avr.c"
   1:quantum/backlight/backlight_avr.c **** #include "quantum.h"
   2:quantum/backlight/backlight_avr.c **** #include "backlight.h"
   3:quantum/backlight/backlight_avr.c **** #include "backlight_driver_common.h"
   4:quantum/backlight/backlight_avr.c **** #include "debug.h"
   5:quantum/backlight/backlight_avr.c **** 
   6:quantum/backlight/backlight_avr.c **** // Maximum duty cycle limit
   7:quantum/backlight/backlight_avr.c **** #ifndef BACKLIGHT_LIMIT_VAL
   8:quantum/backlight/backlight_avr.c **** #    define BACKLIGHT_LIMIT_VAL 255
   9:quantum/backlight/backlight_avr.c **** #endif
  10:quantum/backlight/backlight_avr.c **** 
  11:quantum/backlight/backlight_avr.c **** // This logic is a bit complex, we support 3 setups:
  12:quantum/backlight/backlight_avr.c **** //
  13:quantum/backlight/backlight_avr.c **** //   1. Hardware PWM when backlight is wired to a PWM pin.
  14:quantum/backlight/backlight_avr.c **** //      Depending on this pin, we use a different output compare unit.
  15:quantum/backlight/backlight_avr.c **** //   2. Software PWM with hardware timers, but the used timer
  16:quantum/backlight/backlight_avr.c **** //      depends on the Audio setup (Audio wins over Backlight).
  17:quantum/backlight/backlight_avr.c **** //   3. Full software PWM, driven by the matrix scan, if both timers are used by Audio.
  18:quantum/backlight/backlight_avr.c **** 
  19:quantum/backlight/backlight_avr.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
  20:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
  21:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
  22:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR1A
  23:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR1B
  24:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER1_OVF_vect
  25:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK1
  26:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE1
  27:quantum/backlight/backlight_avr.c **** 
  28:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_PIN == B5
  29:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1A0
  30:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1A1
  31:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1A
  32:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == B6
  33:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1B0
  34:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1B1
  35:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1B
  36:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == B7
  37:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1C0
  38:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1C1
  39:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1C
  40:quantum/backlight/backlight_avr.c **** #    endif
  41:quantum/backlight/backlight_avr.c **** #elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) |
  42:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
  43:quantum/backlight/backlight_avr.c **** #    define ICRx ICR3
  44:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR3A
  45:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR3B
  46:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER3_OVF_vect
  47:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK3
  48:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE3
  49:quantum/backlight/backlight_avr.c **** 
  50:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_PIN == C4
  51:quantum/backlight/backlight_avr.c **** #        if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  52:quantum/backlight/backlight_avr.c **** #            error This MCU has no C4 pin!
  53:quantum/backlight/backlight_avr.c **** #        else
  54:quantum/backlight/backlight_avr.c **** #            define COMxx0 COM3C0
  55:quantum/backlight/backlight_avr.c **** #            define COMxx1 COM3C1
  56:quantum/backlight/backlight_avr.c **** #            define OCRxx OCR3C
  57:quantum/backlight/backlight_avr.c **** #        endif
  58:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == C5
  59:quantum/backlight/backlight_avr.c **** #        if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
  60:quantum/backlight/backlight_avr.c **** #            error This MCU has no C5 pin!
  61:quantum/backlight/backlight_avr.c **** #        else
  62:quantum/backlight/backlight_avr.c **** #            define COMxx0 COM3B0
  63:quantum/backlight/backlight_avr.c **** #            define COMxx1 COM3B1
  64:quantum/backlight/backlight_avr.c **** #            define OCRxx OCR3B
  65:quantum/backlight/backlight_avr.c **** #        endif
  66:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == C6
  67:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM3A0
  68:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM3A1
  69:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR3A
  70:quantum/backlight/backlight_avr.c **** #    endif
  71:quantum/backlight/backlight_avr.c **** #elif (defined(__AVR_AT90USB162__) || defined(__AVR_ATmega16U2__) || defined(__AVR_ATmega32U2__)) &
  72:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
  73:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
  74:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR1A
  75:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR1B
  76:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER1_OVF_vect
  77:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK1
  78:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE1
  79:quantum/backlight/backlight_avr.c **** 
  80:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_PIN == B7
  81:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1C0
  82:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1C1
  83:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1C
  84:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == C5
  85:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1B0
  86:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1B1
  87:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1B
  88:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == C6
  89:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1A0
  90:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1A1
  91:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1A
  92:quantum/backlight/backlight_avr.c **** #    endif
  93:quantum/backlight/backlight_avr.c **** #elif defined(__AVR_ATmega32A__) && (BACKLIGHT_PIN == D4 || BACKLIGHT_PIN == D5)
  94:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
  95:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
  96:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR1A
  97:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR1B
  98:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER1_OVF_vect
  99:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK
 100:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE1
 101:quantum/backlight/backlight_avr.c **** 
 102:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_PIN == D4
 103:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1B0
 104:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1B1
 105:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1B
 106:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == D5
 107:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1A0
 108:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1A1
 109:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1A
 110:quantum/backlight/backlight_avr.c **** #    endif
 111:quantum/backlight/backlight_avr.c **** #elif (defined(__AVR_ATmega328P__) || defined(__AVR_ATmega328__)) && (BACKLIGHT_PIN == B1 || BACKLI
 112:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
 113:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
 114:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR1A
 115:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR1B
 116:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER1_OVF_vect
 117:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK1
 118:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE1
 119:quantum/backlight/backlight_avr.c **** 
 120:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_PIN == B1
 121:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1A0
 122:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1A1
 123:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1A
 124:quantum/backlight/backlight_avr.c **** #    elif BACKLIGHT_PIN == B2
 125:quantum/backlight/backlight_avr.c **** #        define COMxx0 COM1B0
 126:quantum/backlight/backlight_avr.c **** #        define COMxx1 COM1B1
 127:quantum/backlight/backlight_avr.c **** #        define OCRxx OCR1B
 128:quantum/backlight/backlight_avr.c **** #    endif
 129:quantum/backlight/backlight_avr.c **** #elif (AUDIO_PIN != B5) && (AUDIO_PIN != B6) && (AUDIO_PIN != B7) && (AUDIO_PIN_ALT != B5) && (AUDI
 130:quantum/backlight/backlight_avr.c **** // Timer 1 is not in use by Audio feature, Backlight can use it
 131:quantum/backlight/backlight_avr.c **** #    pragma message "Using hardware timer 1 with software PWM"
 132:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
 133:quantum/backlight/backlight_avr.c **** #    define BACKLIGHT_PWM_TIMER
 134:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
 135:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR1A
 136:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR1B
 137:quantum/backlight/backlight_avr.c **** #    define TIMERx_COMPA_vect TIMER1_COMPA_vect
 138:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER1_OVF_vect
 139:quantum/backlight/backlight_avr.c **** #    if defined(__AVR_ATmega32A__)  // This MCU has only one TIMSK register
 140:quantum/backlight/backlight_avr.c **** #        define TIMSKx TIMSK
 141:quantum/backlight/backlight_avr.c **** #    else
 142:quantum/backlight/backlight_avr.c **** #        define TIMSKx TIMSK1
 143:quantum/backlight/backlight_avr.c **** #    endif
 144:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE1
 145:quantum/backlight/backlight_avr.c **** 
 146:quantum/backlight/backlight_avr.c **** #    define OCIExA OCIE1A
 147:quantum/backlight/backlight_avr.c **** #    define OCRxx OCR1A
 148:quantum/backlight/backlight_avr.c **** #elif (AUDIO_PIN != C4) && (AUDIO_PIN != C5) && (AUDIO_PIN != C6)
 149:quantum/backlight/backlight_avr.c **** #    pragma message "Using hardware timer 3 with software PWM"
 150:quantum/backlight/backlight_avr.c **** // Timer 3 is not in use by Audio feature, Backlight can use it
 151:quantum/backlight/backlight_avr.c **** #    define HARDWARE_PWM
 152:quantum/backlight/backlight_avr.c **** #    define BACKLIGHT_PWM_TIMER
 153:quantum/backlight/backlight_avr.c **** #    define ICRx ICR1
 154:quantum/backlight/backlight_avr.c **** #    define TCCRxA TCCR3A
 155:quantum/backlight/backlight_avr.c **** #    define TCCRxB TCCR3B
 156:quantum/backlight/backlight_avr.c **** #    define TIMERx_COMPA_vect TIMER3_COMPA_vect
 157:quantum/backlight/backlight_avr.c **** #    define TIMERx_OVF_vect TIMER3_OVF_vect
 158:quantum/backlight/backlight_avr.c **** #    define TIMSKx TIMSK3
 159:quantum/backlight/backlight_avr.c **** #    define TOIEx TOIE3
 160:quantum/backlight/backlight_avr.c **** 
 161:quantum/backlight/backlight_avr.c **** #    define OCIExA OCIE3A
 162:quantum/backlight/backlight_avr.c **** #    define OCRxx OCR3A
 163:quantum/backlight/backlight_avr.c **** #elif defined(BACKLIGHT_CUSTOM_DRIVER)
 164:quantum/backlight/backlight_avr.c **** error("Please set 'BACKLIGHT_DRIVER = custom' within rules.mk")
 165:quantum/backlight/backlight_avr.c **** #else
 166:quantum/backlight/backlight_avr.c **** error("Please set 'BACKLIGHT_DRIVER = software' within rules.mk")
 167:quantum/backlight/backlight_avr.c **** #endif
 168:quantum/backlight/backlight_avr.c **** 
 169:quantum/backlight/backlight_avr.c **** #ifndef BACKLIGHT_PWM_TIMER  // pwm through software
 170:quantum/backlight/backlight_avr.c **** 
 171:quantum/backlight/backlight_avr.c **** static inline void enable_pwm(void) {
 172:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_ON_STATE == 1
 173:quantum/backlight/backlight_avr.c ****     TCCRxA |= _BV(COMxx1);
 174:quantum/backlight/backlight_avr.c **** #    else
 175:quantum/backlight/backlight_avr.c ****     TCCRxA |= _BV(COMxx1) | _BV(COMxx0);
 176:quantum/backlight/backlight_avr.c **** #    endif
 177:quantum/backlight/backlight_avr.c **** }
 178:quantum/backlight/backlight_avr.c **** 
 179:quantum/backlight/backlight_avr.c **** static inline void disable_pwm(void) {
 180:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_ON_STATE == 1
 181:quantum/backlight/backlight_avr.c ****     TCCRxA &= ~(_BV(COMxx1));
 182:quantum/backlight/backlight_avr.c **** #    else
 183:quantum/backlight/backlight_avr.c ****     TCCRxA &= ~(_BV(COMxx1) | _BV(COMxx0));
 184:quantum/backlight/backlight_avr.c **** #    endif
 185:quantum/backlight/backlight_avr.c **** }
 186:quantum/backlight/backlight_avr.c **** 
 187:quantum/backlight/backlight_avr.c **** #endif
 188:quantum/backlight/backlight_avr.c **** 
 189:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_PWM_TIMER
 190:quantum/backlight/backlight_avr.c **** 
 191:quantum/backlight/backlight_avr.c **** // The idea of software PWM assisted by hardware timers is the following
 192:quantum/backlight/backlight_avr.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
 193:quantum/backlight/backlight_avr.c **** // instead of letting the Output Match Comparator control the led pin
 194:quantum/backlight/backlight_avr.c **** // (which is not possible since the backlight is not wired to PWM pins on the
 195:quantum/backlight/backlight_avr.c **** // CPU), we do the LED on/off by oursleves.
 196:quantum/backlight/backlight_avr.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
 197:quantum/backlight/backlight_avr.c **** // register to the current 16bits backlight level (after CIE correction).
 198:quantum/backlight/backlight_avr.c **** // This means the CPU will trigger a compare match interrupt when the counter
 199:quantum/backlight/backlight_avr.c **** // reaches the backlight level, where we turn off the LEDs,
 200:quantum/backlight/backlight_avr.c **** // but also an overflow interrupt when the counter rolls back to 0,
 201:quantum/backlight/backlight_avr.c **** // in which we're going to turn on the LEDs.
 202:quantum/backlight/backlight_avr.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
 203:quantum/backlight/backlight_avr.c **** 
 204:quantum/backlight/backlight_avr.c **** // Triggered when the counter reaches the OCRx value
 205:quantum/backlight/backlight_avr.c **** ISR(TIMERx_COMPA_vect) { backlight_pins_off(); }
 206:quantum/backlight/backlight_avr.c **** 
 207:quantum/backlight/backlight_avr.c **** // Triggered when the counter reaches the TOP value
 208:quantum/backlight/backlight_avr.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
 209:quantum/backlight/backlight_avr.c **** ISR(TIMERx_OVF_vect) {
 210:quantum/backlight/backlight_avr.c **** #    ifdef BACKLIGHT_BREATHING
 211:quantum/backlight/backlight_avr.c ****     if (is_breathing()) {
 212:quantum/backlight/backlight_avr.c ****         breathing_task();
 213:quantum/backlight/backlight_avr.c ****     }
 214:quantum/backlight/backlight_avr.c **** #    endif
 215:quantum/backlight/backlight_avr.c ****     // for very small values of OCRxx (or backlight level)
 216:quantum/backlight/backlight_avr.c ****     // we can't guarantee this whole code won't execute
 217:quantum/backlight/backlight_avr.c ****     // at the same time as the compare match interrupt
 218:quantum/backlight/backlight_avr.c ****     // which means that we might turn on the leds while
 219:quantum/backlight/backlight_avr.c ****     // trying to turn them off, leading to flickering
 220:quantum/backlight/backlight_avr.c ****     // artifacts (especially while breathing, because breathing_task
 221:quantum/backlight/backlight_avr.c ****     // takes many computation cycles).
 222:quantum/backlight/backlight_avr.c ****     // so better not turn them on while the counter TOP is very low.
 223:quantum/backlight/backlight_avr.c ****     if (OCRxx > 256) {
 224:quantum/backlight/backlight_avr.c ****         backlight_pins_on();
 225:quantum/backlight/backlight_avr.c ****     }
 226:quantum/backlight/backlight_avr.c **** }
 227:quantum/backlight/backlight_avr.c **** 
 228:quantum/backlight/backlight_avr.c **** #endif
 229:quantum/backlight/backlight_avr.c **** 
 230:quantum/backlight/backlight_avr.c **** #define TIMER_TOP 0xFFFFU
 231:quantum/backlight/backlight_avr.c **** 
 232:quantum/backlight/backlight_avr.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 233:quantum/backlight/backlight_avr.c **** static uint16_t cie_lightness(uint16_t v) {
  16               		.loc 1 233 43 view -0
  17               		.cfi_startproc
  18               		.loc 1 233 43 is_stmt 0 view .LVU1
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
 234:quantum/backlight/backlight_avr.c ****     if (v <= 5243)     // if below 8% of max
  39               		.loc 1 234 5 is_stmt 1 view .LVU2
  40               		.loc 1 234 8 is_stmt 0 view .LVU3
  41 0008 8C37      		cpi r24,124
  42 000a 24E1      		ldi r18,20
  43 000c 9207      		cpc r25,r18
  44 000e 00F4      		brsh .L2
 235:quantum/backlight/backlight_avr.c ****         return v / 9;  // same as dividing by 900%
  45               		.loc 1 235 9 is_stmt 1 view .LVU4
  46               		.loc 1 235 18 is_stmt 0 view .LVU5
  47 0010 69E0      		ldi r22,lo8(9)
  48 0012 70E0      		ldi r23,0
  49 0014 0E94 0000 		call __udivmodhi4
  50               	.LVL1:
  51               	.L1:
 236:quantum/backlight/backlight_avr.c ****     else {
 237:quantum/backlight/backlight_avr.c ****         uint32_t y = (((uint32_t)v + 10486) << 8) / (10486 + 0xFFFFUL);  // add 16% of max and comp
 238:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
 239:quantum/backlight/backlight_avr.c ****         // and revert what we've done again after squaring.
 240:quantum/backlight/backlight_avr.c ****         y = y * y * y >> 8;
 241:quantum/backlight/backlight_avr.c ****         if (y > 0xFFFFUL)  // prevent overflow
 242:quantum/backlight/backlight_avr.c ****             return 0xFFFFU;
 243:quantum/backlight/backlight_avr.c ****         else
 244:quantum/backlight/backlight_avr.c ****             return (uint16_t)y;
 245:quantum/backlight/backlight_avr.c ****     }
 246:quantum/backlight/backlight_avr.c **** }
  52               		.loc 1 246 1 view .LVU6
  53 0018 CB01      		movw r24,r22
  54               	/* epilogue start */
  55 001a FF90      		pop r15
  56 001c EF90      		pop r14
  57 001e DF90      		pop r13
  58 0020 CF90      		pop r12
  59 0022 0895      		ret
  60               	.LVL2:
  61               	.L2:
  62               	.LBB7:
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  63               		.loc 1 237 9 is_stmt 1 view .LVU7
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  64               		.loc 1 237 24 is_stmt 0 view .LVU8
  65 0024 B0E0      		ldi r27,0
  66 0026 A0E0      		ldi r26,0
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  67               		.loc 1 237 36 view .LVU9
  68 0028 BC01      		movw r22,r24
  69 002a CD01      		movw r24,r26
  70               	.LVL3:
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  71               		.loc 1 237 36 view .LVU10
  72 002c 6A50      		subi r22,10
  73 002e 774D      		sbci r23,-41
  74 0030 8F4F      		sbci r24,-1
  75 0032 9F4F      		sbci r25,-1
  76               	.LVL4:
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  77               		.loc 1 237 45 view .LVU11
  78 0034 982F      		mov r25,r24
  79 0036 872F      		mov r24,r23
  80 0038 762F      		mov r23,r22
  81 003a 6627      		clr r22
 237:quantum/backlight/backlight_avr.c ****         // to get a useful result with integer division, we shift left in the expression above
  82               		.loc 1 237 18 view .LVU12
  83 003c 25EF      		ldi r18,lo8(-11)
  84 003e 38E2      		ldi r19,lo8(40)
  85 0040 41E0      		ldi r20,lo8(1)
  86 0042 50E0      		ldi r21,0
  87 0044 0E94 0000 		call __udivmodsi4
  88 0048 6901      		movw r12,r18
  89 004a 7A01      		movw r14,r20
  90               	.LVL5:
 240:quantum/backlight/backlight_avr.c ****         if (y > 0xFFFFUL)  // prevent overflow
  91               		.loc 1 240 9 is_stmt 1 view .LVU13
 240:quantum/backlight/backlight_avr.c ****         if (y > 0xFFFFUL)  // prevent overflow
  92               		.loc 1 240 15 is_stmt 0 view .LVU14
  93 004c CA01      		movw r24,r20
  94 004e B901      		movw r22,r18
  95 0050 0E94 0000 		call __mulsi3
  96 0054 9B01      		movw r18,r22
  97 0056 AC01      		movw r20,r24
 240:quantum/backlight/backlight_avr.c ****         if (y > 0xFFFFUL)  // prevent overflow
  98               		.loc 1 240 19 view .LVU15
  99 0058 C701      		movw r24,r14
 100 005a B601      		movw r22,r12
 101 005c 0E94 0000 		call __mulsi3
 240:quantum/backlight/backlight_avr.c ****         if (y > 0xFFFFUL)  // prevent overflow
 102               		.loc 1 240 11 view .LVU16
 103 0060 672F      		mov r22,r23
 104 0062 782F      		mov r23,r24
 105 0064 892F      		mov r24,r25
 106 0066 9927      		clr r25
 107               	.LVL6:
 241:quantum/backlight/backlight_avr.c ****             return 0xFFFFU;
 108               		.loc 1 241 9 is_stmt 1 view .LVU17
 241:quantum/backlight/backlight_avr.c ****             return 0xFFFFU;
 109               		.loc 1 241 12 is_stmt 0 view .LVU18
 110 0068 6115      		cp r22,__zero_reg__
 111 006a 7105      		cpc r23,__zero_reg__
 112 006c 21E0      		ldi r18,1
 113 006e 8207      		cpc r24,r18
 114 0070 9105      		cpc r25,__zero_reg__
 115 0072 01F4      		brne .L1
 242:quantum/backlight/backlight_avr.c ****         else
 116               		.loc 1 242 20 view .LVU19
 117 0074 6FEF      		ldi r22,lo8(-1)
 118 0076 7FEF      		ldi r23,lo8(-1)
 119               	.LVL7:
 242:quantum/backlight/backlight_avr.c ****         else
 120               		.loc 1 242 20 view .LVU20
 121 0078 00C0      		rjmp .L1
 122               	.LBE7:
 123               		.cfi_endproc
 124               	.LFE26:
 126               		.section	.text.backlight_set,"ax",@progbits
 127               	.global	backlight_set
 129               	backlight_set:
 130               	.LVL8:
 131               	.LFB29:
 247:quantum/backlight/backlight_avr.c **** 
 248:quantum/backlight/backlight_avr.c **** // rescale the supplied backlight value to be in terms of the value limit
 249:quantum/backlight/backlight_avr.c **** static uint32_t rescale_limit_val(uint32_t val) { return (val * (BACKLIGHT_LIMIT_VAL + 1)) / 256; }
 250:quantum/backlight/backlight_avr.c **** 
 251:quantum/backlight/backlight_avr.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 252:quantum/backlight/backlight_avr.c **** static inline void set_pwm(uint16_t val) { OCRxx = val; }
 253:quantum/backlight/backlight_avr.c **** 
 254:quantum/backlight/backlight_avr.c **** void backlight_set(uint8_t level) {
 132               		.loc 1 254 35 is_stmt 1 view -0
 133               		.cfi_startproc
 134               		.loc 1 254 35 is_stmt 0 view .LVU22
 135 0000 CF93      		push r28
 136               	.LCFI4:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 28, -2
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 1 */
 142               	.L__stack_usage = 1
 143 0002 C82F      		mov r28,r24
 255:quantum/backlight/backlight_avr.c ****     if (level > BACKLIGHT_LEVELS) level = BACKLIGHT_LEVELS;
 144               		.loc 1 255 5 is_stmt 1 view .LVU23
 145               		.loc 1 255 8 is_stmt 0 view .LVU24
 146 0004 8630      		cpi r24,lo8(6)
 147 0006 00F4      		brsh .L8
 256:quantum/backlight/backlight_avr.c **** 
 257:quantum/backlight/backlight_avr.c ****     if (level == 0) {
 148               		.loc 1 257 5 is_stmt 1 view .LVU25
 149               		.loc 1 257 8 is_stmt 0 view .LVU26
 150 0008 8111      		cpse r24,__zero_reg__
 151 000a 00C0      		rjmp .L6
 258:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_PWM_TIMER
 259:quantum/backlight/backlight_avr.c ****         if (OCRxx) {
 260:quantum/backlight/backlight_avr.c ****             TIMSKx &= ~(_BV(OCIExA));
 261:quantum/backlight/backlight_avr.c ****             TIMSKx &= ~(_BV(TOIEx));
 262:quantum/backlight/backlight_avr.c ****         }
 263:quantum/backlight/backlight_avr.c **** #else
 264:quantum/backlight/backlight_avr.c ****         // Turn off PWM control on backlight pin
 265:quantum/backlight/backlight_avr.c ****         disable_pwm();
 152               		.loc 1 265 9 is_stmt 1 view .LVU27
 153               	.LBB16:
 154               	.LBI16:
 179:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_ON_STATE == 1
 155               		.loc 1 179 20 view .LVU28
 156               	.LBB17:
 181:quantum/backlight/backlight_avr.c **** #    else
 157               		.loc 1 181 5 view .LVU29
 181:quantum/backlight/backlight_avr.c **** #    else
 158               		.loc 1 181 12 is_stmt 0 view .LVU30
 159 000c 8091 8000 		lds r24,128
 160               	.LVL9:
 181:quantum/backlight/backlight_avr.c **** #    else
 161               		.loc 1 181 12 view .LVU31
 162 0010 8F7D      		andi r24,lo8(-33)
 163 0012 8093 8000 		sts 128,r24
 164               	.LBE17:
 165               	.LBE16:
 266:quantum/backlight/backlight_avr.c **** #endif
 267:quantum/backlight/backlight_avr.c ****         backlight_pins_off();
 166               		.loc 1 267 9 is_stmt 1 view .LVU32
 167 0016 0E94 0000 		call backlight_pins_off
 168               	.LVL10:
 169               	.L7:
 268:quantum/backlight/backlight_avr.c ****     } else {
 269:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_PWM_TIMER
 270:quantum/backlight/backlight_avr.c ****         if (!OCRxx) {
 271:quantum/backlight/backlight_avr.c ****             TIMSKx |= _BV(OCIExA);
 272:quantum/backlight/backlight_avr.c ****             TIMSKx |= _BV(TOIEx);
 273:quantum/backlight/backlight_avr.c ****         }
 274:quantum/backlight/backlight_avr.c **** #else
 275:quantum/backlight/backlight_avr.c ****         // Turn on PWM control of backlight pin
 276:quantum/backlight/backlight_avr.c ****         enable_pwm();
 277:quantum/backlight/backlight_avr.c **** #endif
 278:quantum/backlight/backlight_avr.c ****     }
 279:quantum/backlight/backlight_avr.c ****     // Set the brightness
 280:quantum/backlight/backlight_avr.c ****     set_pwm(cie_lightness(rescale_limit_val(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS)));
 170               		.loc 1 280 5 view .LVU33
 249:quantum/backlight/backlight_avr.c **** 
 171               		.loc 1 249 51 view .LVU34
 172               		.loc 1 280 55 is_stmt 0 view .LVU35
 173 001a 2C2F      		mov r18,r28
 174 001c 30E0      		ldi r19,0
 175 001e AFEF      		ldi r26,lo8(-1)
 176 0020 BFEF      		ldi r27,lo8(-1)
 177 0022 0E94 0000 		call __umulhisi3
 178               		.loc 1 280 27 view .LVU36
 179 0026 25E0      		ldi r18,lo8(5)
 180 0028 30E0      		ldi r19,0
 181 002a 40E0      		ldi r20,0
 182 002c 50E0      		ldi r21,0
 183 002e 0E94 0000 		call __udivmodsi4
 184               		.loc 1 280 5 view .LVU37
 185 0032 C901      		movw r24,r18
 186 0034 0E94 0000 		call cie_lightness
 187               	.LVL11:
 188               	.LBB18:
 189               	.LBI18:
 252:quantum/backlight/backlight_avr.c **** 
 190               		.loc 1 252 20 is_stmt 1 view .LVU38
 191               	.LBB19:
 252:quantum/backlight/backlight_avr.c **** 
 192               		.loc 1 252 44 view .LVU39
 252:quantum/backlight/backlight_avr.c **** 
 193               		.loc 1 252 50 is_stmt 0 view .LVU40
 194 0038 9093 8B00 		sts 138+1,r25
 195 003c 8093 8A00 		sts 138,r24
 196               	.LVL12:
 197               	/* epilogue start */
 252:quantum/backlight/backlight_avr.c **** 
 198               		.loc 1 252 50 view .LVU41
 199               	.LBE19:
 200               	.LBE18:
 281:quantum/backlight/backlight_avr.c **** }
 201               		.loc 1 281 1 view .LVU42
 202 0040 CF91      		pop r28
 203 0042 0895      		ret
 204               	.LVL13:
 205               	.L8:
 255:quantum/backlight/backlight_avr.c **** 
 206               		.loc 1 255 41 view .LVU43
 207 0044 C5E0      		ldi r28,lo8(5)
 208               	.L6:
 276:quantum/backlight/backlight_avr.c **** #endif
 209               		.loc 1 276 9 is_stmt 1 view .LVU44
 210               	.LBB20:
 211               	.LBI20:
 171:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_ON_STATE == 1
 212               		.loc 1 171 20 view .LVU45
 213               	.LBB21:
 173:quantum/backlight/backlight_avr.c **** #    else
 214               		.loc 1 173 5 view .LVU46
 173:quantum/backlight/backlight_avr.c **** #    else
 215               		.loc 1 173 12 is_stmt 0 view .LVU47
 216 0046 8091 8000 		lds r24,128
 217               	.LVL14:
 173:quantum/backlight/backlight_avr.c **** #    else
 218               		.loc 1 173 12 view .LVU48
 219 004a 8062      		ori r24,lo8(32)
 220 004c 8093 8000 		sts 128,r24
 221 0050 00C0      		rjmp .L7
 222               	.LBE21:
 223               	.LBE20:
 224               		.cfi_endproc
 225               	.LFE29:
 227               		.section	.text.backlight_task,"ax",@progbits
 228               	.global	backlight_task
 230               	backlight_task:
 231               	.LFB30:
 282:quantum/backlight/backlight_avr.c **** 
 283:quantum/backlight/backlight_avr.c **** void backlight_task(void) {}
 232               		.loc 1 283 27 is_stmt 1 view -0
 233               		.cfi_startproc
 234               	/* prologue: function */
 235               	/* frame size = 0 */
 236               	/* stack size = 0 */
 237               	.L__stack_usage = 0
 238               		.loc 1 283 28 view .LVU50
 239               	/* epilogue start */
 240               		.loc 1 283 1 is_stmt 0 view .LVU51
 241 0000 0895      		ret
 242               		.cfi_endproc
 243               	.LFE30:
 245               		.section	.text.is_breathing,"ax",@progbits
 246               	.global	is_breathing
 248               	is_breathing:
 249               	.LFB31:
 284:quantum/backlight/backlight_avr.c **** 
 285:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_BREATHING
 286:quantum/backlight/backlight_avr.c **** 
 287:quantum/backlight/backlight_avr.c **** #    define BREATHING_NO_HALT 0
 288:quantum/backlight/backlight_avr.c **** #    define BREATHING_HALT_OFF 1
 289:quantum/backlight/backlight_avr.c **** #    define BREATHING_HALT_ON 2
 290:quantum/backlight/backlight_avr.c **** #    define BREATHING_STEPS 128
 291:quantum/backlight/backlight_avr.c **** 
 292:quantum/backlight/backlight_avr.c **** static uint8_t  breathing_halt    = BREATHING_NO_HALT;
 293:quantum/backlight/backlight_avr.c **** static uint16_t breathing_counter = 0;
 294:quantum/backlight/backlight_avr.c **** 
 295:quantum/backlight/backlight_avr.c **** #    ifdef BACKLIGHT_PWM_TIMER
 296:quantum/backlight/backlight_avr.c **** static bool breathing = false;
 297:quantum/backlight/backlight_avr.c **** 
 298:quantum/backlight/backlight_avr.c **** bool is_breathing(void) { return breathing; }
 299:quantum/backlight/backlight_avr.c **** 
 300:quantum/backlight/backlight_avr.c **** #        define breathing_interrupt_enable() \
 301:quantum/backlight/backlight_avr.c ****             do {                             \
 302:quantum/backlight/backlight_avr.c ****                 breathing = true;            \
 303:quantum/backlight/backlight_avr.c ****             } while (0)
 304:quantum/backlight/backlight_avr.c **** #        define breathing_interrupt_disable() \
 305:quantum/backlight/backlight_avr.c ****             do {                              \
 306:quantum/backlight/backlight_avr.c ****                 breathing = false;            \
 307:quantum/backlight/backlight_avr.c ****             } while (0)
 308:quantum/backlight/backlight_avr.c **** #    else
 309:quantum/backlight/backlight_avr.c **** 
 310:quantum/backlight/backlight_avr.c **** bool is_breathing(void) { return !!(TIMSKx & _BV(TOIEx)); }
 250               		.loc 1 310 25 is_stmt 1 view -0
 251               		.cfi_startproc
 252               	/* prologue: function */
 253               	/* frame size = 0 */
 254               	/* stack size = 0 */
 255               	.L__stack_usage = 0
 256               		.loc 1 310 27 view .LVU53
 257               		.loc 1 310 37 is_stmt 0 view .LVU54
 258 0000 8091 6F00 		lds r24,111
 259               		.loc 1 310 1 view .LVU55
 260 0004 8170      		andi r24,lo8(1)
 261               	/* epilogue start */
 262 0006 0895      		ret
 263               		.cfi_endproc
 264               	.LFE31:
 266               		.section	.text.breathing_enable,"ax",@progbits
 267               	.global	breathing_enable
 269               	breathing_enable:
 270               	.LFB32:
 311:quantum/backlight/backlight_avr.c **** 
 312:quantum/backlight/backlight_avr.c **** #        define breathing_interrupt_enable() \
 313:quantum/backlight/backlight_avr.c ****             do {                             \
 314:quantum/backlight/backlight_avr.c ****                 TIMSKx |= _BV(TOIEx);        \
 315:quantum/backlight/backlight_avr.c ****             } while (0)
 316:quantum/backlight/backlight_avr.c **** #        define breathing_interrupt_disable() \
 317:quantum/backlight/backlight_avr.c ****             do {                              \
 318:quantum/backlight/backlight_avr.c ****                 TIMSKx &= ~_BV(TOIEx);        \
 319:quantum/backlight/backlight_avr.c ****             } while (0)
 320:quantum/backlight/backlight_avr.c **** #    endif
 321:quantum/backlight/backlight_avr.c **** 
 322:quantum/backlight/backlight_avr.c **** #    define breathing_min()        \
 323:quantum/backlight/backlight_avr.c ****         do {                       \
 324:quantum/backlight/backlight_avr.c ****             breathing_counter = 0; \
 325:quantum/backlight/backlight_avr.c ****         } while (0)
 326:quantum/backlight/backlight_avr.c **** #    define breathing_max()                                       \
 327:quantum/backlight/backlight_avr.c ****         do {                                                      \
 328:quantum/backlight/backlight_avr.c ****             breathing_counter = get_breathing_period() * 244 / 2; \
 329:quantum/backlight/backlight_avr.c ****         } while (0)
 330:quantum/backlight/backlight_avr.c **** 
 331:quantum/backlight/backlight_avr.c **** void breathing_enable(void) {
 271               		.loc 1 331 29 is_stmt 1 view -0
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 332:quantum/backlight/backlight_avr.c ****     breathing_counter = 0;
 277               		.loc 1 332 5 view .LVU57
 278               		.loc 1 332 23 is_stmt 0 view .LVU58
 279 0000 1092 0000 		sts breathing_counter+1,__zero_reg__
 280 0004 1092 0000 		sts breathing_counter,__zero_reg__
 333:quantum/backlight/backlight_avr.c ****     breathing_halt    = BREATHING_NO_HALT;
 281               		.loc 1 333 5 is_stmt 1 view .LVU59
 282               		.loc 1 333 23 is_stmt 0 view .LVU60
 283 0008 1092 0000 		sts breathing_halt,__zero_reg__
 334:quantum/backlight/backlight_avr.c ****     breathing_interrupt_enable();
 284               		.loc 1 334 5 is_stmt 1 view .LVU61
 285               		.loc 1 334 5 view .LVU62
 286 000c EFE6      		ldi r30,lo8(111)
 287 000e F0E0      		ldi r31,0
 288 0010 8081      		ld r24,Z
 289 0012 8160      		ori r24,lo8(1)
 290 0014 8083      		st Z,r24
 291               		.loc 1 334 5 view .LVU63
 292               	/* epilogue start */
 335:quantum/backlight/backlight_avr.c **** }
 293               		.loc 1 335 1 is_stmt 0 view .LVU64
 294 0016 0895      		ret
 295               		.cfi_endproc
 296               	.LFE32:
 298               		.section	.text.breathing_pulse,"ax",@progbits
 299               	.global	breathing_pulse
 301               	breathing_pulse:
 302               	.LFB33:
 336:quantum/backlight/backlight_avr.c **** 
 337:quantum/backlight/backlight_avr.c **** void breathing_pulse(void) {
 303               		.loc 1 337 28 is_stmt 1 view -0
 304               		.cfi_startproc
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 0 */
 308               	.L__stack_usage = 0
 338:quantum/backlight/backlight_avr.c ****     if (get_backlight_level() == 0)
 309               		.loc 1 338 5 view .LVU66
 310               		.loc 1 338 9 is_stmt 0 view .LVU67
 311 0000 0E94 0000 		call get_backlight_level
 312               	.LVL15:
 313               		.loc 1 338 8 view .LVU68
 314 0004 8111      		cpse r24,__zero_reg__
 315 0006 00C0      		rjmp .L13
 339:quantum/backlight/backlight_avr.c ****         breathing_min();
 316               		.loc 1 339 9 is_stmt 1 view .LVU69
 317               		.loc 1 339 9 view .LVU70
 318 0008 1092 0000 		sts breathing_counter+1,__zero_reg__
 319 000c 1092 0000 		sts breathing_counter,__zero_reg__
 320               		.loc 1 339 9 view .LVU71
 321               	.L14:
 340:quantum/backlight/backlight_avr.c ****     else
 341:quantum/backlight/backlight_avr.c ****         breathing_max();
 322               		.loc 1 341 9 discriminator 1 view .LVU72
 342:quantum/backlight/backlight_avr.c ****     breathing_halt = BREATHING_HALT_ON;
 323               		.loc 1 342 5 discriminator 1 view .LVU73
 324               		.loc 1 342 20 is_stmt 0 discriminator 1 view .LVU74
 325 0010 82E0      		ldi r24,lo8(2)
 326 0012 8093 0000 		sts breathing_halt,r24
 343:quantum/backlight/backlight_avr.c ****     breathing_interrupt_enable();
 327               		.loc 1 343 5 is_stmt 1 discriminator 1 view .LVU75
 328               		.loc 1 343 5 discriminator 1 view .LVU76
 329 0016 8091 6F00 		lds r24,111
 330 001a 8160      		ori r24,lo8(1)
 331 001c 8093 6F00 		sts 111,r24
 332               		.loc 1 343 5 discriminator 1 view .LVU77
 333               	/* epilogue start */
 344:quantum/backlight/backlight_avr.c **** }
 334               		.loc 1 344 1 is_stmt 0 discriminator 1 view .LVU78
 335 0020 0895      		ret
 336               	.L13:
 341:quantum/backlight/backlight_avr.c ****     breathing_halt = BREATHING_HALT_ON;
 337               		.loc 1 341 9 is_stmt 1 view .LVU79
 341:quantum/backlight/backlight_avr.c ****     breathing_halt = BREATHING_HALT_ON;
 338               		.loc 1 341 9 view .LVU80
 339 0022 0E94 0000 		call get_breathing_period
 340               	.LVL16:
 341 0026 2AE7      		ldi r18,lo8(122)
 342 0028 829F      		mul r24,r18
 343 002a C001      		movw r24,r0
 344 002c 1124      		clr __zero_reg__
 345 002e 9093 0000 		sts breathing_counter+1,r25
 346 0032 8093 0000 		sts breathing_counter,r24
 347 0036 00C0      		rjmp .L14
 348               		.cfi_endproc
 349               	.LFE33:
 351               		.section	.text.breathing_disable,"ax",@progbits
 352               	.global	breathing_disable
 354               	breathing_disable:
 355               	.LFB34:
 345:quantum/backlight/backlight_avr.c **** 
 346:quantum/backlight/backlight_avr.c **** void breathing_disable(void) {
 356               		.loc 1 346 30 view -0
 357               		.cfi_startproc
 358               	/* prologue: function */
 359               	/* frame size = 0 */
 360               	/* stack size = 0 */
 361               	.L__stack_usage = 0
 347:quantum/backlight/backlight_avr.c ****     breathing_interrupt_disable();
 362               		.loc 1 347 5 view .LVU82
 363               		.loc 1 347 5 view .LVU83
 364 0000 EFE6      		ldi r30,lo8(111)
 365 0002 F0E0      		ldi r31,0
 366 0004 8081      		ld r24,Z
 367 0006 8E7F      		andi r24,lo8(-2)
 368 0008 8083      		st Z,r24
 369               		.loc 1 347 5 view .LVU84
 348:quantum/backlight/backlight_avr.c ****     // Restore backlight level
 349:quantum/backlight/backlight_avr.c ****     backlight_set(get_backlight_level());
 370               		.loc 1 349 5 view .LVU85
 371 000a 0E94 0000 		call get_backlight_level
 372               	.LVL17:
 373 000e 0C94 0000 		jmp backlight_set
 374               	.LVL18:
 375               		.cfi_endproc
 376               	.LFE34:
 378               		.section	.text.breathing_self_disable,"ax",@progbits
 379               	.global	breathing_self_disable
 381               	breathing_self_disable:
 382               	.LFB35:
 350:quantum/backlight/backlight_avr.c **** }
 351:quantum/backlight/backlight_avr.c **** 
 352:quantum/backlight/backlight_avr.c **** void breathing_self_disable(void) {
 383               		.loc 1 352 35 view -0
 384               		.cfi_startproc
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
 353:quantum/backlight/backlight_avr.c ****     if (get_backlight_level() == 0)
 389               		.loc 1 353 5 view .LVU87
 390               		.loc 1 353 9 is_stmt 0 view .LVU88
 391 0000 0E94 0000 		call get_backlight_level
 392               	.LVL19:
 393               		.loc 1 353 8 view .LVU89
 394 0004 8111      		cpse r24,__zero_reg__
 395 0006 00C0      		rjmp .L17
 354:quantum/backlight/backlight_avr.c ****         breathing_halt = BREATHING_HALT_OFF;
 396               		.loc 1 354 9 is_stmt 1 view .LVU90
 397               		.loc 1 354 24 is_stmt 0 view .LVU91
 398 0008 81E0      		ldi r24,lo8(1)
 399               	.L19:
 355:quantum/backlight/backlight_avr.c ****     else
 356:quantum/backlight/backlight_avr.c ****         breathing_halt = BREATHING_HALT_ON;
 400               		.loc 1 356 24 view .LVU92
 401 000a 8093 0000 		sts breathing_halt,r24
 402               	/* epilogue start */
 357:quantum/backlight/backlight_avr.c **** }
 403               		.loc 1 357 1 view .LVU93
 404 000e 0895      		ret
 405               	.L17:
 356:quantum/backlight/backlight_avr.c **** }
 406               		.loc 1 356 9 is_stmt 1 view .LVU94
 356:quantum/backlight/backlight_avr.c **** }
 407               		.loc 1 356 24 is_stmt 0 view .LVU95
 408 0010 82E0      		ldi r24,lo8(2)
 409 0012 00C0      		rjmp .L19
 410               		.cfi_endproc
 411               	.LFE35:
 413               		.section	.text.__vector_20,"ax",@progbits
 414               	.global	__vector_20
 416               	__vector_20:
 417               	.LFB37:
 358:quantum/backlight/backlight_avr.c **** 
 359:quantum/backlight/backlight_avr.c **** /* To generate breathing curve in python:
 360:quantum/backlight/backlight_avr.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
 361:quantum/backlight/backlight_avr.c ****  */
 362:quantum/backlight/backlight_avr.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
 363:quantum/backlight/backlight_avr.c **** 
 364:quantum/backlight/backlight_avr.c **** // Use this before the cie_lightness function.
 365:quantum/backlight/backlight_avr.c **** static inline uint16_t scale_backlight(uint16_t v) { return v / BACKLIGHT_LEVELS * get_backlight_le
 366:quantum/backlight/backlight_avr.c **** 
 367:quantum/backlight/backlight_avr.c **** #    ifdef BACKLIGHT_PWM_TIMER
 368:quantum/backlight/backlight_avr.c **** void breathing_task(void)
 369:quantum/backlight/backlight_avr.c **** #    else
 370:quantum/backlight/backlight_avr.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
 371:quantum/backlight/backlight_avr.c ****  * about 244 times per second.
 372:quantum/backlight/backlight_avr.c ****  */
 373:quantum/backlight/backlight_avr.c **** ISR(TIMERx_OVF_vect)
 374:quantum/backlight/backlight_avr.c **** #    endif
 375:quantum/backlight/backlight_avr.c **** {
 418               		.loc 1 375 1 is_stmt 1 view -0
 419               		.cfi_startproc
 420 0000 1F92      		push r1
 421               	.LCFI5:
 422               		.cfi_def_cfa_offset 3
 423               		.cfi_offset 1, -2
 424 0002 0F92      		push r0
 425               	.LCFI6:
 426               		.cfi_def_cfa_offset 4
 427               		.cfi_offset 0, -3
 428 0004 0FB6      		in r0,__SREG__
 429 0006 0F92      		push r0
 430 0008 1124      		clr __zero_reg__
 431 000a 2F93      		push r18
 432               	.LCFI7:
 433               		.cfi_def_cfa_offset 5
 434               		.cfi_offset 18, -4
 435 000c 3F93      		push r19
 436               	.LCFI8:
 437               		.cfi_def_cfa_offset 6
 438               		.cfi_offset 19, -5
 439 000e 4F93      		push r20
 440               	.LCFI9:
 441               		.cfi_def_cfa_offset 7
 442               		.cfi_offset 20, -6
 443 0010 5F93      		push r21
 444               	.LCFI10:
 445               		.cfi_def_cfa_offset 8
 446               		.cfi_offset 21, -7
 447 0012 6F93      		push r22
 448               	.LCFI11:
 449               		.cfi_def_cfa_offset 9
 450               		.cfi_offset 22, -8
 451 0014 7F93      		push r23
 452               	.LCFI12:
 453               		.cfi_def_cfa_offset 10
 454               		.cfi_offset 23, -9
 455 0016 8F93      		push r24
 456               	.LCFI13:
 457               		.cfi_def_cfa_offset 11
 458               		.cfi_offset 24, -10
 459 0018 9F93      		push r25
 460               	.LCFI14:
 461               		.cfi_def_cfa_offset 12
 462               		.cfi_offset 25, -11
 463 001a AF93      		push r26
 464               	.LCFI15:
 465               		.cfi_def_cfa_offset 13
 466               		.cfi_offset 26, -12
 467 001c BF93      		push r27
 468               	.LCFI16:
 469               		.cfi_def_cfa_offset 14
 470               		.cfi_offset 27, -13
 471 001e CF93      		push r28
 472               	.LCFI17:
 473               		.cfi_def_cfa_offset 15
 474               		.cfi_offset 28, -14
 475 0020 EF93      		push r30
 476               	.LCFI18:
 477               		.cfi_def_cfa_offset 16
 478               		.cfi_offset 30, -15
 479 0022 FF93      		push r31
 480               	.LCFI19:
 481               		.cfi_def_cfa_offset 17
 482               		.cfi_offset 31, -16
 483               	/* prologue: Signal */
 484               	/* frame size = 0 */
 485               	/* stack size = 16 */
 486               	.L__stack_usage = 16
 376:quantum/backlight/backlight_avr.c ****     uint8_t  breathing_period = get_breathing_period();
 487               		.loc 1 376 5 view .LVU97
 488               		.loc 1 376 33 is_stmt 0 view .LVU98
 489 0024 0E94 0000 		call get_breathing_period
 490               	.LVL20:
 377:quantum/backlight/backlight_avr.c ****     uint16_t interval         = (uint16_t)breathing_period * 244 / BREATHING_STEPS;
 491               		.loc 1 377 5 is_stmt 1 view .LVU99
 378:quantum/backlight/backlight_avr.c ****     // resetting after one period to prevent ugly reset at overflow.
 379:quantum/backlight/backlight_avr.c ****     breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
 492               		.loc 1 379 5 view .LVU100
 493               		.loc 1 379 44 is_stmt 0 view .LVU101
 494 0028 4091 0000 		lds r20,breathing_counter
 495 002c 5091 0000 		lds r21,breathing_counter+1
 496 0030 4F5F      		subi r20,-1
 497 0032 5F4F      		sbci r21,-1
 498               		.loc 1 379 69 view .LVU102
 499 0034 94EF      		ldi r25,lo8(-12)
 500 0036 899F      		mul r24,r25
 501 0038 9001      		movw r18,r0
 502 003a 1124      		clr __zero_reg__
 503               		.loc 1 379 49 view .LVU103
 504 003c CA01      		movw r24,r20
 505               	.LVL21:
 506               		.loc 1 379 49 view .LVU104
 507 003e B901      		movw r22,r18
 508 0040 0E94 0000 		call __udivmodhi4
 509               		.loc 1 379 23 view .LVU105
 510 0044 9093 0000 		sts breathing_counter+1,r25
 511 0048 8093 0000 		sts breathing_counter,r24
 380:quantum/backlight/backlight_avr.c ****     uint8_t index     = breathing_counter / interval % BREATHING_STEPS;
 512               		.loc 1 380 5 is_stmt 1 view .LVU106
 377:quantum/backlight/backlight_avr.c ****     uint16_t interval         = (uint16_t)breathing_period * 244 / BREATHING_STEPS;
 513               		.loc 1 377 14 is_stmt 0 view .LVU107
 514 004c B901      		movw r22,r18
 515 004e 660F      		lsl r22
 516 0050 672F      		mov r22,r23
 517 0052 661F      		rol r22
 518 0054 770B      		sbc r23,r23
 519 0056 7195      		neg r23
 520               		.loc 1 380 43 view .LVU108
 521 0058 0E94 0000 		call __udivmodhi4
 522               		.loc 1 380 13 view .LVU109
 523 005c 6F77      		andi r22,lo8(127)
 524               	.LVL22:
 381:quantum/backlight/backlight_avr.c **** 
 382:quantum/backlight/backlight_avr.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) || ((breathing_ha
 525               		.loc 1 382 5 is_stmt 1 view .LVU110
 526               		.loc 1 382 26 is_stmt 0 view .LVU111
 527 005e 8091 0000 		lds r24,breathing_halt
 528               		.loc 1 382 8 view .LVU112
 529 0062 8230      		cpi r24,lo8(2)
 530 0064 01F4      		brne .L21
 531               		.loc 1 382 48 discriminator 1 view .LVU113
 532 0066 6034      		cpi r22,lo8(64)
 533 0068 01F4      		brne .L23
 534               	.L22:
 383:quantum/backlight/backlight_avr.c ****         breathing_interrupt_disable();
 535               		.loc 1 383 9 is_stmt 1 view .LVU114
 536               		.loc 1 383 9 view .LVU115
 537 006a 8091 6F00 		lds r24,111
 538 006e 8E7F      		andi r24,lo8(-2)
 539 0070 8093 6F00 		sts 111,r24
 540 0074 00C0      		rjmp .L23
 541               	.L21:
 382:quantum/backlight/backlight_avr.c ****         breathing_interrupt_disable();
 542               		.loc 1 382 83 is_stmt 0 discriminator 3 view .LVU116
 543 0076 8130      		cpi r24,lo8(1)
 544 0078 01F4      		brne .L23
 382:quantum/backlight/backlight_avr.c ****         breathing_interrupt_disable();
 545               		.loc 1 382 126 discriminator 4 view .LVU117
 546 007a 6F37      		cpi r22,lo8(127)
 547 007c 01F0      		breq .L22
 548               	.L23:
 549               		.loc 1 383 9 is_stmt 1 discriminator 1 view .LVU118
 384:quantum/backlight/backlight_avr.c ****     }
 385:quantum/backlight/backlight_avr.c **** 
 386:quantum/backlight/backlight_avr.c ****     set_pwm(cie_lightness(rescale_limit_val(scale_backlight((uint16_t)pgm_read_byte(&breathing_tabl
 550               		.loc 1 386 5 discriminator 1 view .LVU119
 551               	.LBB29:
 552               		.loc 1 386 71 discriminator 1 view .LVU120
 553               	.LVL23:
 554               		.loc 1 386 71 discriminator 1 view .LVU121
 555               		.loc 1 386 71 discriminator 1 view .LVU122
 556 007e E62F      		mov r30,r22
 557 0080 F0E0      		ldi r31,0
 558 0082 E050      		subi r30,lo8(-(breathing_table))
 559 0084 F040      		sbci r31,hi8(-(breathing_table))
 560               	/* #APP */
 561               	 ;  386 "quantum/backlight/backlight_avr.c" 1
 562 0086 C491      		lpm r28, Z
 563               		
 564               	 ;  0 "" 2
 565               	.LVL24:
 566               		.loc 1 386 71 discriminator 1 view .LVU123
 567               		.loc 1 386 71 is_stmt 0 discriminator 1 view .LVU124
 568               	/* #NOAPP */
 569               	.LBE29:
 570               	.LBB30:
 571               	.LBI30:
 365:quantum/backlight/backlight_avr.c **** 
 572               		.loc 1 365 24 is_stmt 1 discriminator 1 view .LVU125
 573               	.LBB31:
 365:quantum/backlight/backlight_avr.c **** 
 574               		.loc 1 365 54 discriminator 1 view .LVU126
 365:quantum/backlight/backlight_avr.c **** 
 575               		.loc 1 365 84 is_stmt 0 discriminator 1 view .LVU127
 576 0088 0E94 0000 		call get_backlight_level
 577               	.LVL25:
 365:quantum/backlight/backlight_avr.c **** 
 578               		.loc 1 365 84 discriminator 1 view .LVU128
 579 008c 282F      		mov r18,r24
 580               	.LVL26:
 365:quantum/backlight/backlight_avr.c **** 
 581               		.loc 1 365 84 discriminator 1 view .LVU129
 582               	.LBE31:
 583               	.LBE30:
 249:quantum/backlight/backlight_avr.c **** 
 584               		.loc 1 249 51 is_stmt 1 discriminator 1 view .LVU130
 585               		.loc 1 386 45 is_stmt 0 discriminator 1 view .LVU131
 586 008e 41E0      		ldi r20,lo8(1)
 587 0090 51E0      		ldi r21,lo8(1)
 588 0092 C49F      		mul r28,r20
 589 0094 C001      		movw r24,r0
 590 0096 C59F      		mul r28,r21
 591 0098 900D      		add r25,r0
 592 009a 1124      		clr __zero_reg__
 593               	.LBB33:
 594               	.LBB32:
 365:quantum/backlight/backlight_avr.c **** 
 595               		.loc 1 365 63 discriminator 1 view .LVU132
 596 009c 65E0      		ldi r22,lo8(5)
 597 009e 70E0      		ldi r23,0
 598 00a0 0E94 0000 		call __udivmodhi4
 599               	.LBE32:
 600               	.LBE33:
 601               		.loc 1 386 5 discriminator 1 view .LVU133
 602 00a4 269F      		mul r18,r22
 603 00a6 C001      		movw r24,r0
 604 00a8 279F      		mul r18,r23
 605 00aa 900D      		add r25,r0
 606 00ac 1124      		clr __zero_reg__
 607 00ae 0E94 0000 		call cie_lightness
 608               	.LVL27:
 609               	.LBB34:
 610               	.LBI34:
 252:quantum/backlight/backlight_avr.c **** 
 611               		.loc 1 252 20 is_stmt 1 discriminator 1 view .LVU134
 612               	.LBB35:
 252:quantum/backlight/backlight_avr.c **** 
 613               		.loc 1 252 44 discriminator 1 view .LVU135
 252:quantum/backlight/backlight_avr.c **** 
 614               		.loc 1 252 50 is_stmt 0 discriminator 1 view .LVU136
 615 00b2 9093 8B00 		sts 138+1,r25
 616 00b6 8093 8A00 		sts 138,r24
 617               	.LVL28:
 618               	/* epilogue start */
 252:quantum/backlight/backlight_avr.c **** 
 619               		.loc 1 252 50 discriminator 1 view .LVU137
 620               	.LBE35:
 621               	.LBE34:
 387:quantum/backlight/backlight_avr.c **** }
 622               		.loc 1 387 1 discriminator 1 view .LVU138
 623 00ba FF91      		pop r31
 624 00bc EF91      		pop r30
 625 00be CF91      		pop r28
 626               	.LVL29:
 627               		.loc 1 387 1 discriminator 1 view .LVU139
 628 00c0 BF91      		pop r27
 629 00c2 AF91      		pop r26
 630 00c4 9F91      		pop r25
 631 00c6 8F91      		pop r24
 632 00c8 7F91      		pop r23
 633 00ca 6F91      		pop r22
 634 00cc 5F91      		pop r21
 635 00ce 4F91      		pop r20
 636 00d0 3F91      		pop r19
 637 00d2 2F91      		pop r18
 638 00d4 0F90      		pop r0
 639 00d6 0FBE      		out __SREG__,r0
 640 00d8 0F90      		pop r0
 641 00da 1F90      		pop r1
 642 00dc 1895      		reti
 643               		.cfi_endproc
 644               	.LFE37:
 646               		.section	.text.backlight_init_ports,"ax",@progbits
 647               	.global	backlight_init_ports
 649               	backlight_init_ports:
 650               	.LFB38:
 388:quantum/backlight/backlight_avr.c **** 
 389:quantum/backlight/backlight_avr.c **** #endif  // BACKLIGHT_BREATHING
 390:quantum/backlight/backlight_avr.c **** 
 391:quantum/backlight/backlight_avr.c **** void backlight_init_ports(void) {
 651               		.loc 1 391 33 is_stmt 1 view -0
 652               		.cfi_startproc
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 392:quantum/backlight/backlight_avr.c ****     // Setup backlight pin as output and output to on state.
 393:quantum/backlight/backlight_avr.c ****     backlight_pins_init();
 657               		.loc 1 393 5 view .LVU141
 658 0000 0E94 0000 		call backlight_pins_init
 659               	.LVL30:
 394:quantum/backlight/backlight_avr.c **** 
 395:quantum/backlight/backlight_avr.c ****     // I could write a wall of text here to explain... but TL;DW
 396:quantum/backlight/backlight_avr.c ****     // Go read the ATmega32u4 datasheet.
 397:quantum/backlight/backlight_avr.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
 398:quantum/backlight/backlight_avr.c **** 
 399:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_PWM_TIMER
 400:quantum/backlight/backlight_avr.c ****     // TimerX setup, Fast PWM mode count to TOP set in ICRx
 401:quantum/backlight/backlight_avr.c ****     TCCRxA = _BV(WGM11);  // = 0b00000010;
 402:quantum/backlight/backlight_avr.c ****     // clock select clk/1
 403:quantum/backlight/backlight_avr.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);  // = 0b00011001;
 404:quantum/backlight/backlight_avr.c **** #else                                              // hardware PWM
 405:quantum/backlight/backlight_avr.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
 406:quantum/backlight/backlight_avr.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 407:quantum/backlight/backlight_avr.c ****     // (i.e. start high, go low when counter matches.)
 408:quantum/backlight/backlight_avr.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 409:quantum/backlight/backlight_avr.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 410:quantum/backlight/backlight_avr.c **** 
 411:quantum/backlight/backlight_avr.c ****     /*
 412:quantum/backlight/backlight_avr.c ****     14.8.3:
 413:quantum/backlight/backlight_avr.c ****     "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Settin
 414:quantum/backlight/backlight_avr.c ****     "In fast PWM mode the counter is incremented until the counter value matches either one of the 
 415:quantum/backlight/backlight_avr.c ****     */
 416:quantum/backlight/backlight_avr.c **** #    if BACKLIGHT_ON_STATE == 1
 417:quantum/backlight/backlight_avr.c ****     TCCRxA = _BV(COMxx1) | _BV(WGM11);
 660               		.loc 1 417 5 view .LVU142
 661               		.loc 1 417 12 is_stmt 0 view .LVU143
 662 0004 82E2      		ldi r24,lo8(34)
 663 0006 8093 8000 		sts 128,r24
 418:quantum/backlight/backlight_avr.c **** #    else
 419:quantum/backlight/backlight_avr.c ****     TCCRxA = _BV(COMxx1) | _BV(COMxx0) | _BV(WGM11);
 420:quantum/backlight/backlight_avr.c **** #    endif
 421:quantum/backlight/backlight_avr.c **** 
 422:quantum/backlight/backlight_avr.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);
 664               		.loc 1 422 5 is_stmt 1 view .LVU144
 665               		.loc 1 422 12 is_stmt 0 view .LVU145
 666 000a 89E1      		ldi r24,lo8(25)
 667 000c 8093 8100 		sts 129,r24
 423:quantum/backlight/backlight_avr.c **** #endif
 424:quantum/backlight/backlight_avr.c ****     // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
 425:quantum/backlight/backlight_avr.c ****     ICRx = TIMER_TOP;
 668               		.loc 1 425 5 is_stmt 1 view .LVU146
 669               		.loc 1 425 10 is_stmt 0 view .LVU147
 670 0010 8FEF      		ldi r24,lo8(-1)
 671 0012 9FEF      		ldi r25,lo8(-1)
 672 0014 9093 8700 		sts 134+1,r25
 673 0018 8093 8600 		sts 134,r24
 426:quantum/backlight/backlight_avr.c **** 
 427:quantum/backlight/backlight_avr.c ****     backlight_init();
 674               		.loc 1 427 5 is_stmt 1 view .LVU148
 675 001c 0E94 0000 		call backlight_init
 676               	.LVL31:
 428:quantum/backlight/backlight_avr.c **** #ifdef BACKLIGHT_BREATHING
 429:quantum/backlight/backlight_avr.c ****     if (is_backlight_breathing()) {
 677               		.loc 1 429 5 view .LVU149
 678               		.loc 1 429 9 is_stmt 0 view .LVU150
 679 0020 0E94 0000 		call is_backlight_breathing
 680               	.LVL32:
 681               		.loc 1 429 8 view .LVU151
 682 0024 8111      		cpse r24,__zero_reg__
 430:quantum/backlight/backlight_avr.c ****         breathing_enable();
 683               		.loc 1 430 9 is_stmt 1 view .LVU152
 684 0026 0C94 0000 		jmp breathing_enable
 685               	.LVL33:
 686               	.L27:
 687               	/* epilogue start */
 431:quantum/backlight/backlight_avr.c ****     }
 432:quantum/backlight/backlight_avr.c **** #endif
 433:quantum/backlight/backlight_avr.c **** }
 688               		.loc 1 433 1 is_stmt 0 view .LVU153
 689 002a 0895      		ret
 690               		.cfi_endproc
 691               	.LFE38:
 693               		.section	.progmem.data.breathing_table,"a"
 696               	breathing_table:
 697 0000 00        		.byte	0
 698 0001 00        		.byte	0
 699 0002 00        		.byte	0
 700 0003 00        		.byte	0
 701 0004 00        		.byte	0
 702 0005 00        		.byte	0
 703 0006 00        		.byte	0
 704 0007 00        		.byte	0
 705 0008 00        		.byte	0
 706 0009 00        		.byte	0
 707 000a 00        		.byte	0
 708 000b 01        		.byte	1
 709 000c 01        		.byte	1
 710 000d 02        		.byte	2
 711 000e 03        		.byte	3
 712 000f 04        		.byte	4
 713 0010 05        		.byte	5
 714 0011 06        		.byte	6
 715 0012 08        		.byte	8
 716 0013 0A        		.byte	10
 717 0014 0C        		.byte	12
 718 0015 0F        		.byte	15
 719 0016 11        		.byte	17
 720 0017 14        		.byte	20
 721 0018 18        		.byte	24
 722 0019 1C        		.byte	28
 723 001a 20        		.byte	32
 724 001b 24        		.byte	36
 725 001c 29        		.byte	41
 726 001d 2E        		.byte	46
 727 001e 33        		.byte	51
 728 001f 39        		.byte	57
 729 0020 3F        		.byte	63
 730 0021 46        		.byte	70
 731 0022 4C        		.byte	76
 732 0023 53        		.byte	83
 733 0024 5B        		.byte	91
 734 0025 62        		.byte	98
 735 0026 6A        		.byte	106
 736 0027 71        		.byte	113
 737 0028 79        		.byte	121
 738 0029 81        		.byte	-127
 739 002a 8A        		.byte	-118
 740 002b 92        		.byte	-110
 741 002c 9A        		.byte	-102
 742 002d A2        		.byte	-94
 743 002e AA        		.byte	-86
 744 002f B2        		.byte	-78
 745 0030 B9        		.byte	-71
 746 0031 C1        		.byte	-63
 747 0032 C8        		.byte	-56
 748 0033 CF        		.byte	-49
 749 0034 D5        		.byte	-43
 750 0035 DC        		.byte	-36
 751 0036 E1        		.byte	-31
 752 0037 E7        		.byte	-25
 753 0038 EB        		.byte	-21
 754 0039 F0        		.byte	-16
 755 003a F4        		.byte	-12
 756 003b F7        		.byte	-9
 757 003c FA        		.byte	-6
 758 003d FC        		.byte	-4
 759 003e FD        		.byte	-3
 760 003f FE        		.byte	-2
 761 0040 FF        		.byte	-1
 762 0041 FE        		.byte	-2
 763 0042 FD        		.byte	-3
 764 0043 FC        		.byte	-4
 765 0044 FA        		.byte	-6
 766 0045 F7        		.byte	-9
 767 0046 F4        		.byte	-12
 768 0047 F0        		.byte	-16
 769 0048 EB        		.byte	-21
 770 0049 E7        		.byte	-25
 771 004a E1        		.byte	-31
 772 004b DC        		.byte	-36
 773 004c D5        		.byte	-43
 774 004d CF        		.byte	-49
 775 004e C8        		.byte	-56
 776 004f C1        		.byte	-63
 777 0050 B9        		.byte	-71
 778 0051 B2        		.byte	-78
 779 0052 AA        		.byte	-86
 780 0053 A2        		.byte	-94
 781 0054 9A        		.byte	-102
 782 0055 92        		.byte	-110
 783 0056 8A        		.byte	-118
 784 0057 81        		.byte	-127
 785 0058 79        		.byte	121
 786 0059 71        		.byte	113
 787 005a 6A        		.byte	106
 788 005b 62        		.byte	98
 789 005c 5B        		.byte	91
 790 005d 53        		.byte	83
 791 005e 4C        		.byte	76
 792 005f 46        		.byte	70
 793 0060 3F        		.byte	63
 794 0061 39        		.byte	57
 795 0062 33        		.byte	51
 796 0063 2E        		.byte	46
 797 0064 29        		.byte	41
 798 0065 24        		.byte	36
 799 0066 20        		.byte	32
 800 0067 1C        		.byte	28
 801 0068 18        		.byte	24
 802 0069 14        		.byte	20
 803 006a 11        		.byte	17
 804 006b 0F        		.byte	15
 805 006c 0C        		.byte	12
 806 006d 0A        		.byte	10
 807 006e 08        		.byte	8
 808 006f 06        		.byte	6
 809 0070 05        		.byte	5
 810 0071 04        		.byte	4
 811 0072 03        		.byte	3
 812 0073 02        		.byte	2
 813 0074 01        		.byte	1
 814 0075 01        		.byte	1
 815 0076 00        		.byte	0
 816 0077 00        		.byte	0
 817 0078 00        		.byte	0
 818 0079 00        		.byte	0
 819 007a 00        		.byte	0
 820 007b 00        		.byte	0
 821 007c 00        		.byte	0
 822 007d 00        		.byte	0
 823 007e 00        		.byte	0
 824 007f 00        		.byte	0
 825               		.section	.bss.breathing_counter,"aw",@nobits
 828               	breathing_counter:
 829 0000 0000      		.zero	2
 830               		.section	.bss.breathing_halt,"aw",@nobits
 833               	breathing_halt:
 834 0000 00        		.zero	1
 835               		.text
 836               	.Letext0:
 837               		.file 2 "e:\\game\\msys2\\mingw64\\avr\\include\\stdint.h"
 838               		.file 3 "e:\\game\\msys2\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 839               		.file 4 "tmk_core/common/report.h"
 840               		.file 5 "tmk_core/common/action.h"
 841               		.file 6 "tmk_core/common/host.h"
 842               		.file 7 "tmk_core/common/debug.h"
 843               		.file 8 "quantum/keycode_config.h"
 844               		.file 9 "tmk_core/common/timer.h"
 845               		.file 10 "quantum/sequencer/sequencer.h"
 846               		.file 11 "quantum/keymap.h"
 847               		.file 12 "./quantum/color.h"
 848               		.file 13 "quantum/rgblight.h"
 849               		.file 14 "tmk_core/common/action_layer.h"
 850               		.file 15 "tmk_core/common/action_util.h"
 851               		.file 16 "quantum/send_string.h"
 852               		.file 17 "e:\\game\\msys2\\mingw64\\avr\\include\\stdlib.h"
 853               		.file 18 "quantum/backlight/backlight_driver_common.h"
 854               		.file 19 "quantum/backlight/backlight.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 backlight_avr.c
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:4      *ABS*:000000000000003f __SREG__
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:12     .text.cie_lightness:0000000000000000 cie_lightness
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:129    .text.backlight_set:0000000000000000 backlight_set
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:230    .text.backlight_task:0000000000000000 backlight_task
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:248    .text.is_breathing:0000000000000000 is_breathing
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:269    .text.breathing_enable:0000000000000000 breathing_enable
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:828    .bss.breathing_counter:0000000000000000 breathing_counter
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:833    .bss.breathing_halt:0000000000000000 breathing_halt
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:301    .text.breathing_pulse:0000000000000000 breathing_pulse
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:354    .text.breathing_disable:0000000000000000 breathing_disable
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:381    .text.breathing_self_disable:0000000000000000 breathing_self_disable
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:416    .text.__vector_20:0000000000000000 __vector_20
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:696    .progmem.data.breathing_table:0000000000000000 breathing_table
C:\Users\Roningo\AppData\Local\Temp\ccQ0EQWh.s:649    .text.backlight_init_ports:0000000000000000 backlight_init_ports

UNDEFINED SYMBOLS
__udivmodhi4
__udivmodsi4
__mulsi3
backlight_pins_off
__umulhisi3
get_backlight_level
get_breathing_period
backlight_pins_init
backlight_init
is_backlight_breathing
__do_clear_bss
