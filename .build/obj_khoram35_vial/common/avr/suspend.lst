   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB110:
  16               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "suspend.h"
   8:tmk_core/common/avr/suspend.c **** #include "timer.h"
   9:tmk_core/common/avr/suspend.c **** #include "led.h"
  10:tmk_core/common/avr/suspend.c **** #include "host.h"
  11:tmk_core/common/avr/suspend.c **** 
  12:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  13:tmk_core/common/avr/suspend.c **** #    include "lufa.h"
  14:tmk_core/common/avr/suspend.c **** #endif
  15:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_VUSB
  16:tmk_core/common/avr/suspend.c **** #    include "vusb.h"
  17:tmk_core/common/avr/suspend.c **** #endif
  18:tmk_core/common/avr/suspend.c **** 
  19:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  20:tmk_core/common/avr/suspend.c **** #    include "backlight.h"
  21:tmk_core/common/avr/suspend.c **** #endif
  22:tmk_core/common/avr/suspend.c **** 
  23:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  24:tmk_core/common/avr/suspend.c **** #    include "audio.h"
  25:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  26:tmk_core/common/avr/suspend.c **** 
  27:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  28:tmk_core/common/avr/suspend.c **** #    include "rgblight.h"
  29:tmk_core/common/avr/suspend.c **** #endif
  30:tmk_core/common/avr/suspend.c **** 
  31:tmk_core/common/avr/suspend.c **** #ifdef LED_MATRIX_ENABLE
  32:tmk_core/common/avr/suspend.c **** #    include "led_matrix.h"
  33:tmk_core/common/avr/suspend.c **** #endif
  34:tmk_core/common/avr/suspend.c **** #ifdef RGB_MATRIX_ENABLE
  35:tmk_core/common/avr/suspend.c **** #    include "rgb_matrix.h"
  36:tmk_core/common/avr/suspend.c **** #endif
  37:tmk_core/common/avr/suspend.c **** 
  38:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  39:tmk_core/common/avr/suspend.c ****  *
  40:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  41:tmk_core/common/avr/suspend.c ****  */
  42:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  17               		.loc 1 42 33 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  43:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 43 5 view .LVU1
  24               	/* #APP */
  25               	 ;  43 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  44:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 44 5 view .LVU2
  29               		.loc 1 44 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 44 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  36               		.loc 1 44 5 is_stmt 1 view .LVU5
  45:tmk_core/common/avr/suspend.c ****     sleep_enable();
  37               		.loc 1 45 5 view .LVU6
  38               		.loc 1 45 5 view .LVU7
  39 0008 83B7      		in r24,0x33
  40 000a 8160      		ori r24,lo8(1)
  41 000c 83BF      		out 0x33,r24
  42               		.loc 1 45 5 view .LVU8
  46:tmk_core/common/avr/suspend.c ****     sei();
  43               		.loc 1 46 5 view .LVU9
  44               	/* #APP */
  45               	 ;  46 "tmk_core/common/avr/suspend.c" 1
  46 000e 7894      		sei
  47               	 ;  0 "" 2
  47:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  48               		.loc 1 47 5 view .LVU10
  49               		.loc 1 47 5 view .LVU11
  50               	 ;  47 "tmk_core/common/avr/suspend.c" 1
  51 0010 8895      		sleep
  52               		
  53               	 ;  0 "" 2
  54               		.loc 1 47 5 view .LVU12
  48:tmk_core/common/avr/suspend.c ****     sleep_disable();
  55               		.loc 1 48 5 view .LVU13
  56               		.loc 1 48 5 view .LVU14
  57               	/* #NOAPP */
  58 0012 83B7      		in r24,0x33
  59 0014 8E7F      		andi r24,lo8(-2)
  60 0016 83BF      		out 0x33,r24
  61               		.loc 1 48 5 view .LVU15
  62               	/* epilogue start */
  49:tmk_core/common/avr/suspend.c **** }
  63               		.loc 1 49 1 is_stmt 0 view .LVU16
  64 0018 0895      		ret
  65               		.cfi_endproc
  66               	.LFE110:
  68               		.section	.text.matrix_power_up,"ax",@progbits
  69               		.weak	matrix_power_up
  71               	matrix_power_up:
  72               	.LFB115:
  50:tmk_core/common/avr/suspend.c **** 
  51:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  52:tmk_core/common/avr/suspend.c **** 
  53:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  54:tmk_core/common/avr/suspend.c ****  *
  55:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  56:tmk_core/common/avr/suspend.c ****  */
  57:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_user(void) {}
  58:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  59:tmk_core/common/avr/suspend.c ****  *
  60:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  61:tmk_core/common/avr/suspend.c ****  */
  62:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_kb(void) { suspend_power_down_user(); }
  63:tmk_core/common/avr/suspend.c **** 
  64:tmk_core/common/avr/suspend.c **** #if !defined(NO_SUSPEND_POWER_DOWN) && defined(WDT_vect)
  65:tmk_core/common/avr/suspend.c **** 
  66:tmk_core/common/avr/suspend.c **** // clang-format off
  67:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value) \
  68:tmk_core/common/avr/suspend.c **** __asm__ __volatile__ ( \
  69:tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t" \
  70:tmk_core/common/avr/suspend.c ****     "cli" "\n\t" \
  71:tmk_core/common/avr/suspend.c ****     "wdr" "\n\t" \
  72:tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t" \
  73:tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t" \
  74:tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  75:tmk_core/common/avr/suspend.c ****     : /* no outputs */ \
  76:tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  77:tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  78:tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | _BV(WDIE) | (value & 0x07))) \
  79:tmk_core/common/avr/suspend.c ****     : "r0" \
  80:tmk_core/common/avr/suspend.c **** )
  81:tmk_core/common/avr/suspend.c **** // clang-format on
  82:tmk_core/common/avr/suspend.c **** 
  83:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  84:tmk_core/common/avr/suspend.c ****  *
  85:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  90:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  91:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  92:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  93:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  94:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  95:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  96:tmk_core/common/avr/suspend.c ****  */
  97:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  98:tmk_core/common/avr/suspend.c **** 
  99:tmk_core/common/avr/suspend.c **** /** \brief Power down
 100:tmk_core/common/avr/suspend.c ****  *
 101:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 102:tmk_core/common/avr/suspend.c ****  */
 103:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
 104:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
 107:tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
 108:tmk_core/common/avr/suspend.c **** 
 109:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 110:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 111:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 112:tmk_core/common/avr/suspend.c ****     // - prescale clock
 113:tmk_core/common/avr/suspend.c ****     // - BOD disable
 114:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 115:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 116:tmk_core/common/avr/suspend.c ****     sleep_enable();
 117:tmk_core/common/avr/suspend.c ****     sei();
 118:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 119:tmk_core/common/avr/suspend.c ****     sleep_disable();
 120:tmk_core/common/avr/suspend.c **** 
 121:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 122:tmk_core/common/avr/suspend.c ****     wdt_disable();
 123:tmk_core/common/avr/suspend.c **** }
 124:tmk_core/common/avr/suspend.c **** #endif
 125:tmk_core/common/avr/suspend.c **** 
 126:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 127:tmk_core/common/avr/suspend.c ****  *
 128:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 129:tmk_core/common/avr/suspend.c ****  */
 130:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 131:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 132:tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
 133:tmk_core/common/avr/suspend.c **** #endif
 134:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_VUSB
 135:tmk_core/common/avr/suspend.c ****     if (!vusb_suspended) return;
 136:tmk_core/common/avr/suspend.c **** #endif
 137:tmk_core/common/avr/suspend.c **** 
 138:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 139:tmk_core/common/avr/suspend.c **** 
 140:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 141:tmk_core/common/avr/suspend.c ****     // Turn off backlight
 142:tmk_core/common/avr/suspend.c **** #    ifdef BACKLIGHT_ENABLE
 143:tmk_core/common/avr/suspend.c ****     backlight_set(0);
 144:tmk_core/common/avr/suspend.c **** #    endif
 145:tmk_core/common/avr/suspend.c **** 
 146:tmk_core/common/avr/suspend.c ****     // Turn off LED indicators
 147:tmk_core/common/avr/suspend.c ****     uint8_t leds_off = 0;
 148:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 149:tmk_core/common/avr/suspend.c ****     if (is_backlight_enabled()) {
 150:tmk_core/common/avr/suspend.c ****         // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already of
 151:tmk_core/common/avr/suspend.c ****         leds_off |= (1 << USB_LED_CAPS_LOCK);
 152:tmk_core/common/avr/suspend.c ****     }
 153:tmk_core/common/avr/suspend.c **** #    endif
 154:tmk_core/common/avr/suspend.c ****     led_set(leds_off);
 155:tmk_core/common/avr/suspend.c **** 
 156:tmk_core/common/avr/suspend.c ****     // Turn off audio
 157:tmk_core/common/avr/suspend.c **** #    ifdef AUDIO_ENABLE
 158:tmk_core/common/avr/suspend.c ****     stop_all_notes();
 159:tmk_core/common/avr/suspend.c **** #    endif
 160:tmk_core/common/avr/suspend.c **** 
 161:tmk_core/common/avr/suspend.c ****     // Turn off underglow
 162:tmk_core/common/avr/suspend.c **** #    if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 163:tmk_core/common/avr/suspend.c ****     rgblight_suspend();
 164:tmk_core/common/avr/suspend.c **** #    endif
 165:tmk_core/common/avr/suspend.c **** 
 166:tmk_core/common/avr/suspend.c **** #    if defined(LED_MATRIX_ENABLE)
 167:tmk_core/common/avr/suspend.c ****     led_matrix_set_suspend_state(true);
 168:tmk_core/common/avr/suspend.c **** #    endif
 169:tmk_core/common/avr/suspend.c **** #    if defined(RGB_MATRIX_ENABLE)
 170:tmk_core/common/avr/suspend.c ****     rgb_matrix_set_suspend_state(true);
 171:tmk_core/common/avr/suspend.c **** #    endif
 172:tmk_core/common/avr/suspend.c **** 
 173:tmk_core/common/avr/suspend.c ****     // Enter sleep state if possible (ie, the MCU has a watchdog timeout interrupt)
 174:tmk_core/common/avr/suspend.c **** #    if defined(WDT_vect)
 175:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 176:tmk_core/common/avr/suspend.c **** #    endif
 177:tmk_core/common/avr/suspend.c **** #endif
 178:tmk_core/common/avr/suspend.c **** }
 179:tmk_core/common/avr/suspend.c **** 
 180:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_up(void) {}
  73               		.loc 1 180 50 is_stmt 1 view -0
  74               		.cfi_startproc
  75               	/* prologue: function */
  76               	/* frame size = 0 */
  77               	/* stack size = 0 */
  78               	.L__stack_usage = 0
  79               		.loc 1 180 51 view .LVU18
  80               	/* epilogue start */
  81               		.loc 1 180 1 is_stmt 0 view .LVU19
  82 0000 0895      		ret
  83               		.cfi_endproc
  84               	.LFE115:
  86               		.set	matrix_power_up.localalias.0,matrix_power_up
  87               		.section	.text.suspend_power_down_user,"ax",@progbits
  88               		.weak	suspend_power_down_user
  90               	suspend_power_down_user:
  91               	.LFB127:
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
  97               	/* epilogue start */
  98 0000 0895      		ret
  99               		.cfi_endproc
 100               	.LFE127:
 102               		.section	.text.suspend_power_down_kb,"ax",@progbits
 103               		.weak	suspend_power_down_kb
 105               	suspend_power_down_kb:
 106               	.LFB112:
  62:tmk_core/common/avr/suspend.c **** 
 107               		.loc 1 62 56 is_stmt 1 view -0
 108               		.cfi_startproc
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  62:tmk_core/common/avr/suspend.c **** 
 113               		.loc 1 62 58 view .LVU21
 114 0000 0C94 0000 		jmp suspend_power_down_user
 115               	.LVL2:
 116               		.cfi_endproc
 117               	.LFE112:
 119               		.section	.text.suspend_power_down,"ax",@progbits
 120               	.global	suspend_power_down
 122               	suspend_power_down:
 123               	.LFB114:
 130:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 124               		.loc 1 130 31 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
 132:tmk_core/common/avr/suspend.c **** #endif
 130               		.loc 1 132 5 view .LVU23
 132:tmk_core/common/avr/suspend.c **** #endif
 131               		.loc 1 132 25 is_stmt 0 view .LVU24
 132 0000 8091 0000 		lds r24,USB_DeviceState
 132:tmk_core/common/avr/suspend.c **** #endif
 133               		.loc 1 132 8 view .LVU25
 134 0004 8430      		cpi r24,lo8(4)
 135 0006 01F0      		breq .L5
 138:tmk_core/common/avr/suspend.c **** 
 136               		.loc 1 138 5 is_stmt 1 view .LVU26
 137 0008 0E94 0000 		call suspend_power_down_kb
 138               	.LVL3:
 147:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 139               		.loc 1 147 5 view .LVU27
 154:tmk_core/common/avr/suspend.c **** 
 140               		.loc 1 154 5 view .LVU28
 141 000c 80E0      		ldi r24,0
 142 000e 0E94 0000 		call led_set
 143               	.LVL4:
 175:tmk_core/common/avr/suspend.c **** #    endif
 144               		.loc 1 175 5 view .LVU29
 145               	.LBB11:
 146               	.LBI11:
 103:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
 147               		.loc 1 103 13 view .LVU30
 148               	.LBB12:
 104:tmk_core/common/avr/suspend.c **** 
 149               		.loc 1 104 5 view .LVU31
 104:tmk_core/common/avr/suspend.c **** 
 150               		.loc 1 104 17 is_stmt 0 view .LVU32
 151 0012 1092 0000 		sts wdt_timeout,__zero_reg__
 107:tmk_core/common/avr/suspend.c **** 
 152               		.loc 1 107 5 is_stmt 1 view .LVU33
 153 0016 88E1      		ldi r24,lo8(24)
 154 0018 90E0      		ldi r25,0
 155 001a 20E4      		ldi r18,lo8(64)
 156               	/* #APP */
 157               	 ;  107 "tmk_core/common/avr/suspend.c" 1
 158 001c 0FB6      		in __tmp_reg__,__SREG__
 159 001e F894      		cli
 160 0020 A895      		wdr
 161 0022 8093 6000 		sts 96,r24
 162 0026 0FBE      		out __SREG__,__tmp_reg__
 163 0028 2093 6000 		sts 96,r18
 164               		
 165               	 ;  0 "" 2
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 166               		.loc 1 115 5 view .LVU34
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 167               		.loc 1 115 5 view .LVU35
 168               	/* #NOAPP */
 169 002c 83B7      		in r24,0x33
 170 002e 817F      		andi r24,lo8(-15)
 171 0030 8460      		ori r24,lo8(4)
 172 0032 83BF      		out 0x33,r24
 115:tmk_core/common/avr/suspend.c ****     sleep_enable();
 173               		.loc 1 115 5 view .LVU36
 116:tmk_core/common/avr/suspend.c ****     sei();
 174               		.loc 1 116 5 view .LVU37
 116:tmk_core/common/avr/suspend.c ****     sei();
 175               		.loc 1 116 5 view .LVU38
 176 0034 83B7      		in r24,0x33
 177 0036 8160      		ori r24,lo8(1)
 178 0038 83BF      		out 0x33,r24
 116:tmk_core/common/avr/suspend.c ****     sei();
 179               		.loc 1 116 5 view .LVU39
 117:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 180               		.loc 1 117 5 view .LVU40
 181               	/* #APP */
 182               	 ;  117 "tmk_core/common/avr/suspend.c" 1
 183 003a 7894      		sei
 184               	 ;  0 "" 2
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 185               		.loc 1 118 5 view .LVU41
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 186               		.loc 1 118 5 view .LVU42
 187               	 ;  118 "tmk_core/common/avr/suspend.c" 1
 188 003c 8895      		sleep
 189               		
 190               	 ;  0 "" 2
 118:tmk_core/common/avr/suspend.c ****     sleep_disable();
 191               		.loc 1 118 5 view .LVU43
 119:tmk_core/common/avr/suspend.c **** 
 192               		.loc 1 119 5 view .LVU44
 119:tmk_core/common/avr/suspend.c **** 
 193               		.loc 1 119 5 view .LVU45
 194               	/* #NOAPP */
 195 003e 83B7      		in r24,0x33
 196 0040 8E7F      		andi r24,lo8(-2)
 197 0042 83BF      		out 0x33,r24
 119:tmk_core/common/avr/suspend.c **** 
 198               		.loc 1 119 5 view .LVU46
 122:tmk_core/common/avr/suspend.c **** }
 199               		.loc 1 122 5 view .LVU47
 200               	.LBB13:
 201               	.LBI13:
 202               		.file 2 "e:\\game\\msys2\\mingw64\\avr\\include\\avr\\wdt.h"
   1:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    All rights reserved.
   4:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
   5:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
   8:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  11:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      distribution.
  15:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  16:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  20:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  32:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  34:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /*
  35:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****  */
  37:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  38:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  41:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #include <stdint.h>
  43:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  44:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /** \file */
  45:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  48:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     the manipulation.
  56:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  57:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  61:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     the following:
  68:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  69:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     \code
  70:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  73:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  75:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     {
  80:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       wdt_disable();
  83:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     }
  84:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     \endcode
  85:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  86:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** */
  91:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  92:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /**
  93:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** */
  98:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
  99:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 101:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 103:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #else
 106:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #endif
 108:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 109:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #else
 114:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #endif
 116:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 117:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #else
 120:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #endif
 122:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 123:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 125:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 126:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /**
 127:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 134:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** */
 136:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 137:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 138:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 140:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** /*
 141:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 142:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    registers to the CCP register
 144:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** ** At the same time,
 145:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 148:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****    sync is finished).
 151:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** */
 152:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 153:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** do { \
 154:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** uint8_t temp; \
 155:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 156:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 165:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : "r0" \
 173:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** ); \
 174:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** } while(0)
 175:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 176:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define wdt_disable() \
 177:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 178:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : \
 184:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : "r0" \
 190:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** );
 191:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 192:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 193:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 194:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 195:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 196:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 198:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 199:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : /* no outputs */  \
 203:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : "r16" \
 209:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** )
 210:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 211:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #define wdt_disable() \
 212:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** do { \
 213:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 214:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 215:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 217:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 218:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : /*no output */ \
 224:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****     : "r16" \
 230:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** ); \
 231:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** }while(0)
 232:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 233:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #elif defined(CCP)
 234:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 235:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** static __inline__
 236:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 237:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 238:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** {
 239:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 241:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 242:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 244:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 245:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 249:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 255:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			);
 256:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 257:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 259:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 260:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 262:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 263:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 267:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 273:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			);
 274:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 275:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 277:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 278:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 280:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 281:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 285:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 291:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			);
 292:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 293:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else
 294:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****  	{
 295:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 296:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 298:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 299:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: /* no outputs */
 303:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			: "r0"
 309:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 			);
 310:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 311:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** }
 312:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 313:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** static __inline__
 314:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 315:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** void wdt_disable (void)
 316:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** {
 317:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 319:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 320:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 321:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 323:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 324:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 330:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 336:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				);
 337:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 338:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 340:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 341:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 342:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 344:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 345:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 351:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 357:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				);
 358:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 359:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 361:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 362:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 363:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 365:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 366:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 372:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 378:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				);
 379:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 380:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else
 381:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 382:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 383:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 384:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 386:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 387:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /*no output */
 393:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 399:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				);
 400:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 401:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** }
 402:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 403:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** #else
 404:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 405:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** static __inline__
 406:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 407:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 408:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** {
 409:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 411:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 412:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 414:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 415:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 416:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 418:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /* no outputs */
 419:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 424:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		);
 425:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 426:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else
 427:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 428:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 429:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 433:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 435:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: /* no outputs */
 436:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 441:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		);
 442:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 443:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** }
 444:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 
 445:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** static __inline__
 446:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 447:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** void wdt_disable (void)
 203               		.loc 2 447 6 view .LVU48
 204               	.LBE13:
 205               	.LBE12:
 206               	.LBE11:
 448:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** {
 449:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 207               		.loc 2 449 2 view .LVU49
 208               	.LBB17:
 209               	.LBB16:
 210               	.LBB15:
 211               	.LBB14:
 450:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 451:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 452:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 453:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 455:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 456:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 				: "r0"
 465:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		);
 466:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	}
 467:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	else
 468:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 	{
 469:e:\game\msys2\mingw64\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 212               		.loc 2 469 9 view .LVU50
 470:e:\game\msys2\mingw64\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 213               		.loc 2 470 3 view .LVU51
 214               	/* #APP */
 215               	 ;  470 "e:\game\msys2\mingw64\avr\include\avr\wdt.h" 1
 216 0044 0FB6      		in __tmp_reg__,__SREG__
 217 0046 F894      		cli
 218 0048 A895      		wdr
 219 004a 8091 6000 		lds r24,96
 220 004e 8861      		ori r24,24
 221 0050 8093 6000 		sts 96,r24
 222 0054 1092 6000 		sts 96,__zero_reg__
 223 0058 0FBE      		out __SREG__,__tmp_reg__
 224               		
 225               	 ;  0 "" 2
 226               	.LVL5:
 227               	/* #NOAPP */
 228               	.L5:
 229               	/* epilogue start */
 230               		.loc 2 470 3 is_stmt 0 view .LVU52
 231               	.LBE14:
 232               	.LBE15:
 233               	.LBE16:
 234               	.LBE17:
 178:tmk_core/common/avr/suspend.c **** 
 235               		.loc 1 178 1 view .LVU53
 236 005a 0895      		ret
 237               		.cfi_endproc
 238               	.LFE114:
 240               		.section	.text.matrix_power_down,"ax",@progbits
 241               		.weak	matrix_power_down
 243               	matrix_power_down:
 244               	.LFB123:
 245               		.cfi_startproc
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
 250               	/* epilogue start */
 251 0000 0895      		ret
 252               		.cfi_endproc
 253               	.LFE123:
 255               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 256               	.global	suspend_wakeup_condition
 258               	suspend_wakeup_condition:
 259               	.LFB117:
 181:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_down(void) {}
 182:tmk_core/common/avr/suspend.c **** bool                       suspend_wakeup_condition(void) {
 260               		.loc 1 182 59 is_stmt 1 view -0
 261               		.cfi_startproc
 262               		.loc 1 182 59 is_stmt 0 view .LVU55
 263 0000 CF93      		push r28
 264               	.LCFI0:
 265               		.cfi_def_cfa_offset 3
 266               		.cfi_offset 28, -2
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 1 */
 270               	.L__stack_usage = 1
 183:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 271               		.loc 1 183 5 is_stmt 1 view .LVU56
 272 0002 0E94 0000 		call matrix_power_up
 273               	.LVL6:
 184:tmk_core/common/avr/suspend.c ****     matrix_scan();
 274               		.loc 1 184 5 view .LVU57
 275 0006 0E94 0000 		call matrix_scan
 276               	.LVL7:
 185:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 277               		.loc 1 185 5 view .LVU58
 278 000a 0E94 0000 		call matrix_power_down
 279               	.LVL8:
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 280               		.loc 1 186 5 view .LVU59
 281               	.LBB18:
 282               		.loc 1 186 10 view .LVU60
 283               		.loc 1 186 25 view .LVU61
 284               		.loc 1 186 18 is_stmt 0 view .LVU62
 285 000e C0E0      		ldi r28,0
 286               	.LVL9:
 287               	.L13:
 187:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 288               		.loc 1 187 9 is_stmt 1 view .LVU63
 289               		.loc 1 187 13 is_stmt 0 view .LVU64
 290 0010 8C2F      		mov r24,r28
 291 0012 0E94 0000 		call matrix_get_row
 292               	.LVL10:
 293               		.loc 1 187 12 view .LVU65
 294 0016 892B      		or r24,r25
 295 0018 01F4      		brne .L14
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 296               		.loc 1 186 42 is_stmt 1 discriminator 2 view .LVU66
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 297               		.loc 1 186 43 is_stmt 0 discriminator 2 view .LVU67
 298 001a CF5F      		subi r28,lo8(-(1))
 299               	.LVL11:
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 300               		.loc 1 186 25 is_stmt 1 discriminator 2 view .LVU68
 186:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 301               		.loc 1 186 5 is_stmt 0 discriminator 2 view .LVU69
 302 001c C730      		cpi r28,lo8(7)
 303 001e 01F4      		brne .L13
 304               	.LBE18:
 188:tmk_core/common/avr/suspend.c ****     }
 189:tmk_core/common/avr/suspend.c ****     return false;
 305               		.loc 1 189 12 view .LVU70
 306 0020 80E0      		ldi r24,0
 307               	.L11:
 308               	/* epilogue start */
 190:tmk_core/common/avr/suspend.c **** }
 309               		.loc 1 190 1 view .LVU71
 310 0022 CF91      		pop r28
 311               	.LVL12:
 312               		.loc 1 190 1 view .LVU72
 313 0024 0895      		ret
 314               	.LVL13:
 315               	.L14:
 316               	.LBB19:
 187:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 317               		.loc 1 187 39 view .LVU73
 318 0026 81E0      		ldi r24,lo8(1)
 319 0028 00C0      		rjmp .L11
 320               	.LBE19:
 321               		.cfi_endproc
 322               	.LFE117:
 324               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 325               		.weak	suspend_wakeup_init_user
 327               	suspend_wakeup_init_user:
 328               	.LFB125:
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334               	/* epilogue start */
 335 0000 0895      		ret
 336               		.cfi_endproc
 337               	.LFE125:
 339               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 340               		.weak	suspend_wakeup_init_kb
 342               	suspend_wakeup_init_kb:
 343               	.LFB119:
 191:tmk_core/common/avr/suspend.c **** 
 192:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 193:tmk_core/common/avr/suspend.c ****  *
 194:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 195:tmk_core/common/avr/suspend.c ****  */
 196:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_user(void) {}
 197:tmk_core/common/avr/suspend.c **** 
 198:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 199:tmk_core/common/avr/suspend.c ****  *
 200:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 201:tmk_core/common/avr/suspend.c ****  */
 202:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_kb(void) { suspend_wakeup_init_user(); }
 344               		.loc 1 202 57 is_stmt 1 view -0
 345               		.cfi_startproc
 346               	/* prologue: function */
 347               	/* frame size = 0 */
 348               	/* stack size = 0 */
 349               	.L__stack_usage = 0
 350               		.loc 1 202 59 view .LVU75
 351 0000 0C94 0000 		jmp suspend_wakeup_init_user
 352               	.LVL14:
 353               		.cfi_endproc
 354               	.LFE119:
 356               		.section	.text.suspend_wakeup_init,"ax",@progbits
 357               	.global	suspend_wakeup_init
 359               	suspend_wakeup_init:
 360               	.LFB120:
 203:tmk_core/common/avr/suspend.c **** 
 204:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 205:tmk_core/common/avr/suspend.c ****  *
 206:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 207:tmk_core/common/avr/suspend.c ****  */
 208:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 361               		.loc 1 208 32 view -0
 362               		.cfi_startproc
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 209:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 210:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 367               		.loc 1 210 5 view .LVU77
 368 0000 0E94 0000 		call clear_keyboard
 369               	.LVL15:
 211:tmk_core/common/avr/suspend.c **** 
 212:tmk_core/common/avr/suspend.c ****     // Turn on backlight
 213:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 214:tmk_core/common/avr/suspend.c ****     backlight_init();
 215:tmk_core/common/avr/suspend.c **** #endif
 216:tmk_core/common/avr/suspend.c **** 
 217:tmk_core/common/avr/suspend.c ****     // Restore LED indicators
 218:tmk_core/common/avr/suspend.c ****     led_set(host_keyboard_leds());
 370               		.loc 1 218 5 view .LVU78
 371 0004 0E94 0000 		call host_keyboard_leds
 372               	.LVL16:
 373 0008 0E94 0000 		call led_set
 374               	.LVL17:
 219:tmk_core/common/avr/suspend.c **** 
 220:tmk_core/common/avr/suspend.c ****     // Wake up underglow
 221:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 222:tmk_core/common/avr/suspend.c ****     rgblight_wakeup();
 223:tmk_core/common/avr/suspend.c **** #endif
 224:tmk_core/common/avr/suspend.c **** 
 225:tmk_core/common/avr/suspend.c **** #if defined(LED_MATRIX_ENABLE)
 226:tmk_core/common/avr/suspend.c ****     led_matrix_set_suspend_state(false);
 227:tmk_core/common/avr/suspend.c **** #endif
 228:tmk_core/common/avr/suspend.c **** #if defined(RGB_MATRIX_ENABLE)
 229:tmk_core/common/avr/suspend.c ****     rgb_matrix_set_suspend_state(false);
 230:tmk_core/common/avr/suspend.c **** #endif
 231:tmk_core/common/avr/suspend.c **** 
 232:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 375               		.loc 1 232 5 view .LVU79
 376 000c 0C94 0000 		jmp suspend_wakeup_init_kb
 377               	.LVL18:
 378               		.cfi_endproc
 379               	.LFE120:
 381               		.section	.text.__vector_12,"ax",@progbits
 382               	.global	__vector_12
 384               	__vector_12:
 385               	.LFB121:
 233:tmk_core/common/avr/suspend.c **** }
 234:tmk_core/common/avr/suspend.c **** 
 235:tmk_core/common/avr/suspend.c **** #if !defined(NO_SUSPEND_POWER_DOWN) && defined(WDT_vect)
 236:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 237:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 386               		.loc 1 237 15 view -0
 387               		.cfi_startproc
 388 0000 1F92 1FB6 		__gcc_isr 1
 388      1F92 1124 
 388      8F93 
 389 000a 9F93      		push r25
 390               	.LCFI1:
 391               		.cfi_def_cfa_offset 3
 392               		.cfi_offset 25, -2
 393 000c AF93      		push r26
 394               	.LCFI2:
 395               		.cfi_def_cfa_offset 4
 396               		.cfi_offset 26, -3
 397 000e BF93      		push r27
 398               	.LCFI3:
 399               		.cfi_def_cfa_offset 5
 400               		.cfi_offset 27, -4
 401               	/* prologue: Signal */
 402               	/* frame size = 0 */
 403               	/* stack size = 3...7 */
 404               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 238:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 239:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 405               		.loc 1 239 5 view .LVU81
 406 0010 8091 0000 		lds r24,wdt_timeout
 407 0014 8111      		cpse r24,__zero_reg__
 408 0016 00C0      		rjmp .L19
 240:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 241:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 409               		.loc 1 241 13 view .LVU82
 410               		.loc 1 241 25 is_stmt 0 view .LVU83
 411 0018 8091 0000 		lds r24,timer_count
 412 001c 9091 0000 		lds r25,timer_count+1
 413 0020 A091 0000 		lds r26,timer_count+2
 414 0024 B091 0000 		lds r27,timer_count+3
 415 0028 4196      		adiw r24,17
 416 002a A11D      		adc r26,__zero_reg__
 417 002c B11D      		adc r27,__zero_reg__
 418 002e 8093 0000 		sts timer_count,r24
 419 0032 9093 0000 		sts timer_count+1,r25
 420 0036 A093 0000 		sts timer_count+2,r26
 421 003a B093 0000 		sts timer_count+3,r27
 242:tmk_core/common/avr/suspend.c ****             break;
 422               		.loc 1 242 13 is_stmt 1 view .LVU84
 243:tmk_core/common/avr/suspend.c ****         default:;
 423               		.loc 1 243 17 view .LVU85
 424               	.L19:
 425               	/* epilogue start */
 244:tmk_core/common/avr/suspend.c ****     }
 245:tmk_core/common/avr/suspend.c **** }
 426               		.loc 1 245 1 is_stmt 0 view .LVU86
 427 003e BF91      		pop r27
 428 0040 AF91      		pop r26
 429 0042 9F91      		pop r25
 430 0044 8F91 1F90 		__gcc_isr 2
 430      1FBE 1F90 
 431 004c 1895      		reti
 432               		__gcc_isr 0,r24
 433               		.cfi_endproc
 434               	.LFE121:
 436               		.section	.bss.wdt_timeout,"aw",@nobits
 439               	wdt_timeout:
 440 0000 00        		.zero	1
 441               		.text
 442               	.Letext0:
 443               		.file 3 "e:\\game\\msys2\\mingw64\\avr\\include\\stdint.h"
 444               		.file 4 "tmk_core/common/action.h"
 445               		.file 5 "tmk_core/common/timer.h"
 446               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 447               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 448               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 449               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 450               		.file 10 "e:\\game\\msys2\\mingw64\\avr\\include\\stdio.h"
 451               		.file 11 "tmk_core/common/report.h"
 452               		.file 12 "tmk_core/common/host_driver.h"
 453               		.file 13 "tmk_core/common/host.h"
 454               		.file 14 "tmk_core/protocol/lufa/lufa.h"
 455               		.file 15 "quantum/led.h"
 456               		.file 16 "quantum/matrix.h"
 457               		.file 17 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:4      *ABS*:000000000000003f __SREG__
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:13     .text.suspend_idle:0000000000000000 suspend_idle
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:71     .text.matrix_power_up:0000000000000000 matrix_power_up
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:71     .text.matrix_power_up:0000000000000000 matrix_power_up.localalias.0
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:90     .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:105    .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:122    .text.suspend_power_down:0000000000000000 suspend_power_down
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:439    .bss.wdt_timeout:0000000000000000 wdt_timeout
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:243    .text.matrix_power_down:0000000000000000 matrix_power_down
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:258    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:327    .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:342    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:359    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
C:\Users\Roningo\AppData\Local\Temp\ccKYKSxi.s:384    .text.__vector_12:0000000000000000 __vector_12
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
