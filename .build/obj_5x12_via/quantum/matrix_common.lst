   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB26:
  15               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "quantum.h"
   2:quantum/matrix_common.c **** #include "matrix.h"
   3:quantum/matrix_common.c **** #include "debounce.h"
   4:quantum/matrix_common.c **** #include "wait.h"
   5:quantum/matrix_common.c **** #include "print.h"
   6:quantum/matrix_common.c **** #include "debug.h"
   7:quantum/matrix_common.c **** 
   8:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   9:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
  10:quantum/matrix_common.c **** #endif
  11:quantum/matrix_common.c **** 
  12:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  13:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  15:quantum/matrix_common.c **** 
  16:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  17:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  18:quantum/matrix_common.c **** #endif
  19:quantum/matrix_common.c **** 
  20:quantum/matrix_common.c **** // user-defined overridable functions
  21:quantum/matrix_common.c **** 
  22:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  23:quantum/matrix_common.c **** 
  24:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  25:quantum/matrix_common.c **** 
  26:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  16               		.loc 1 26 51 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 26 52 view .LVU1
  23               	/* epilogue start */
  24               		.loc 1 26 1 is_stmt 0 view .LVU2
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE26:
  29               		.set	matrix_init_user.localalias.0,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB24:
  22:quantum/matrix_common.c **** 
  35               		.loc 1 22 49 is_stmt 1 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  22:quantum/matrix_common.c **** 
  41               		.loc 1 22 51 view .LVU4
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE24:
  47               		.section	.text.matrix_scan_user,"ax",@progbits
  48               		.weak	matrix_scan_user
  50               	matrix_scan_user:
  51               	.LFB44:
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               	/* epilogue start */
  58 0000 0895      		ret
  59               		.cfi_endproc
  60               	.LFE44:
  62               		.section	.text.matrix_scan_kb,"ax",@progbits
  63               		.weak	matrix_scan_kb
  65               	matrix_scan_kb:
  66               	.LFB25:
  24:quantum/matrix_common.c **** 
  67               		.loc 1 24 49 view -0
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  24:quantum/matrix_common.c **** 
  73               		.loc 1 24 51 view .LVU6
  74 0000 0C94 0000 		jmp matrix_scan_user
  75               	.LVL1:
  76               		.cfi_endproc
  77               	.LFE25:
  79               		.section	.text.matrix_rows,"ax",@progbits
  80               	.global	matrix_rows
  82               	matrix_rows:
  83               	.LFB28:
  27:quantum/matrix_common.c **** 
  28:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  29:quantum/matrix_common.c **** 
  30:quantum/matrix_common.c **** // helper functions
  31:quantum/matrix_common.c **** 
  32:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  84               		.loc 1 32 34 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
  90               		.loc 1 32 36 view .LVU8
  91               		.loc 1 32 1 is_stmt 0 view .LVU9
  92 0000 85E0      		ldi r24,lo8(5)
  93               	/* epilogue start */
  94 0002 0895      		ret
  95               		.cfi_endproc
  96               	.LFE28:
  98               		.section	.text.matrix_cols,"ax",@progbits
  99               	.global	matrix_cols
 101               	matrix_cols:
 102               	.LFB29:
  33:quantum/matrix_common.c **** 
  34:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 103               		.loc 1 34 34 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
 109               		.loc 1 34 36 view .LVU11
 110               		.loc 1 34 1 is_stmt 0 view .LVU12
 111 0000 8CE0      		ldi r24,lo8(12)
 112               	/* epilogue start */
 113 0002 0895      		ret
 114               		.cfi_endproc
 115               	.LFE29:
 117               		.section	.text.matrix_is_on,"ax",@progbits
 118               	.global	matrix_is_on
 120               	matrix_is_on:
 121               	.LVL2:
 122               	.LFB30:
  35:quantum/matrix_common.c **** 
  36:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 123               		.loc 1 36 52 is_stmt 1 view -0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 129               		.loc 1 36 54 view .LVU14
 130               		.loc 1 36 68 is_stmt 0 view .LVU15
 131 0000 E82F      		mov r30,r24
 132 0002 F0E0      		ldi r31,0
 133 0004 EE0F      		lsl r30
 134 0006 FF1F      		rol r31
 135               	.LVL3:
 136               		.loc 1 36 68 view .LVU16
 137 0008 E050      		subi r30,lo8(-(matrix))
 138 000a F040      		sbci r31,hi8(-(matrix))
 139               		.loc 1 36 93 view .LVU17
 140 000c 21E0      		ldi r18,lo8(1)
 141 000e 30E0      		ldi r19,0
 142 0010 00C0      		rjmp 2f
 143               		1:
 144 0012 220F      		lsl r18
 145 0014 331F      		rol r19
 146               		2:
 147 0016 6A95      		dec r22
 148 0018 02F4      		brpl 1b
 149               		.loc 1 36 74 view .LVU18
 150 001a 8081      		ld r24,Z
 151 001c 9181      		ldd r25,Z+1
 152 001e 2823      		and r18,r24
 153 0020 3923      		and r19,r25
 154 0022 81E0      		ldi r24,lo8(1)
 155 0024 232B      		or r18,r19
 156 0026 01F4      		brne .L8
 157 0028 80E0      		ldi r24,0
 158               	.L8:
 159               	/* epilogue start */
 160               		.loc 1 36 1 view .LVU19
 161 002a 0895      		ret
 162               		.cfi_endproc
 163               	.LFE30:
 165               		.section	.text.matrix_get_row,"ax",@progbits
 166               	.global	matrix_get_row
 168               	matrix_get_row:
 169               	.LVL4:
 170               	.LFB31:
  37:quantum/matrix_common.c **** 
  38:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 171               		.loc 1 38 49 is_stmt 1 view -0
 172               		.cfi_startproc
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 0 */
 176               	.L__stack_usage = 0
  39:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  40:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  41:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  42:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  43:quantum/matrix_common.c **** #else
  44:quantum/matrix_common.c ****     return matrix[row];
 177               		.loc 1 44 5 view .LVU21
 178               		.loc 1 44 18 is_stmt 0 view .LVU22
 179 0000 E82F      		mov r30,r24
 180 0002 F0E0      		ldi r31,0
 181 0004 EE0F      		lsl r30
 182 0006 FF1F      		rol r31
 183               	.LVL5:
 184               		.loc 1 44 18 view .LVU23
 185 0008 E050      		subi r30,lo8(-(matrix))
 186 000a F040      		sbci r31,hi8(-(matrix))
  45:quantum/matrix_common.c **** #endif
  46:quantum/matrix_common.c **** }
 187               		.loc 1 46 1 view .LVU24
 188 000c 8081      		ld r24,Z
 189 000e 9181      		ldd r25,Z+1
 190               	/* epilogue start */
 191 0010 0895      		ret
 192               		.cfi_endproc
 193               	.LFE31:
 195               		.section	.text.matrix_is_modified,"ax",@progbits
 196               	.global	matrix_is_modified
 198               	matrix_is_modified:
 199               	.LFB32:
  47:quantum/matrix_common.c **** 
  48:quantum/matrix_common.c **** // Deprecated.
  49:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 200               		.loc 1 49 31 is_stmt 1 view -0
 201               		.cfi_startproc
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 0 */
 205               	.L__stack_usage = 0
  50:quantum/matrix_common.c ****     if (debounce_active()) return false;
 206               		.loc 1 50 5 view .LVU26
 207               		.loc 1 50 9 is_stmt 0 view .LVU27
 208 0000 0E94 0000 		call debounce_active
 209               	.LVL6:
  51:quantum/matrix_common.c ****     return true;
  52:quantum/matrix_common.c **** }
 210               		.loc 1 52 1 view .LVU28
 211 0004 91E0      		ldi r25,lo8(1)
 212 0006 8927      		eor r24,r25
 213               	/* epilogue start */
 214 0008 0895      		ret
 215               		.cfi_endproc
 216               	.LFE32:
 218               		.section	.text.matrix_print,"ax",@progbits
 219               	.global	matrix_print
 221               	matrix_print:
 222               	.LFB33:
  53:quantum/matrix_common.c **** 
  54:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  55:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  56:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  57:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  58:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  59:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  60:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  62:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  63:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  64:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  66:quantum/matrix_common.c **** #endif
  67:quantum/matrix_common.c **** 
  68:quantum/matrix_common.c **** void matrix_print(void) {
 223               		.loc 1 68 25 is_stmt 1 view -0
 224               		.cfi_startproc
 225 0000 CF92      		push r12
 226               	.LCFI0:
 227               		.cfi_def_cfa_offset 3
 228               		.cfi_offset 12, -2
 229 0002 DF92      		push r13
 230               	.LCFI1:
 231               		.cfi_def_cfa_offset 4
 232               		.cfi_offset 13, -3
 233 0004 EF92      		push r14
 234               	.LCFI2:
 235               		.cfi_def_cfa_offset 5
 236               		.cfi_offset 14, -4
 237 0006 FF92      		push r15
 238               	.LCFI3:
 239               		.cfi_def_cfa_offset 6
 240               		.cfi_offset 15, -5
 241 0008 0F93      		push r16
 242               	.LCFI4:
 243               		.cfi_def_cfa_offset 7
 244               		.cfi_offset 16, -6
 245 000a 1F93      		push r17
 246               	.LCFI5:
 247               		.cfi_def_cfa_offset 8
 248               		.cfi_offset 17, -7
 249 000c CF93      		push r28
 250               	.LCFI6:
 251               		.cfi_def_cfa_offset 9
 252               		.cfi_offset 28, -8
 253 000e DF93      		push r29
 254               	.LCFI7:
 255               		.cfi_def_cfa_offset 10
 256               		.cfi_offset 29, -9
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 8 */
 260               	.L__stack_usage = 8
  69:quantum/matrix_common.c ****     print_matrix_header();
 261               		.loc 1 69 5 view .LVU30
 262               	.LBB15:
 263               		.loc 1 69 5 view .LVU31
 264               		.loc 1 69 5 view .LVU32
 265               	.LBE15:
 266 0010 80E0      		ldi r24,lo8(__c.3855)
 267 0012 90E0      		ldi r25,hi8(__c.3855)
 268 0014 0E94 0000 		call xputs
  70:quantum/matrix_common.c **** 
  71:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 269               		.loc 1 71 5 view .LVU33
 270               	.LBB16:
 271               		.loc 1 71 10 view .LVU34
 272               		.loc 1 71 27 view .LVU35
 273 0018 80E0      		ldi r24,lo8(matrix)
 274 001a E82E      		mov r14,r24
 275 001c 80E0      		ldi r24,hi8(matrix)
 276 001e F82E      		mov r15,r24
 277               	.LBE16:
  69:quantum/matrix_common.c ****     print_matrix_header();
 278               		.loc 1 69 5 is_stmt 0 view .LVU36
 279 0020 D0E0      		ldi r29,0
 280 0022 C0E0      		ldi r28,0
 281               	.LBB23:
  72:quantum/matrix_common.c ****         print_hex8(row);
 282               		.loc 1 72 9 view .LVU37
 283 0024 90E0      		ldi r25,lo8(__c.3858)
 284 0026 C92E      		mov r12,r25
 285 0028 90E0      		ldi r25,hi8(__c.3858)
 286 002a D92E      		mov r13,r25
  73:quantum/matrix_common.c ****         print(": ");
  74:quantum/matrix_common.c ****         print_matrix_row(row);
 287               		.loc 1 74 9 view .LVU38
 288 002c 00E0      		ldi r16,lo8(__c.3862)
 289 002e 10E0      		ldi r17,hi8(__c.3862)
 290               	.L12:
  72:quantum/matrix_common.c ****         print_hex8(row);
 291               		.loc 1 72 9 is_stmt 1 discriminator 3 view .LVU39
 292               	.LBB17:
  72:quantum/matrix_common.c ****         print_hex8(row);
 293               		.loc 1 72 9 discriminator 3 view .LVU40
  72:quantum/matrix_common.c ****         print_hex8(row);
 294               		.loc 1 72 9 discriminator 3 view .LVU41
 295               	.LBE17:
 296 0030 DF93      		push r29
 297               	.LCFI8:
 298               		.cfi_def_cfa_offset 11
 299 0032 CF93      		push r28
 300               	.LCFI9:
 301               		.cfi_def_cfa_offset 12
 302 0034 DF92      		push r13
 303               	.LCFI10:
 304               		.cfi_def_cfa_offset 13
 305 0036 CF92      		push r12
 306               	.LCFI11:
 307               		.cfi_def_cfa_offset 14
 308 0038 0E94 0000 		call __xprintf
  73:quantum/matrix_common.c ****         print(": ");
 309               		.loc 1 73 9 discriminator 3 view .LVU42
 310               	.LBB18:
  73:quantum/matrix_common.c ****         print(": ");
 311               		.loc 1 73 9 discriminator 3 view .LVU43
  73:quantum/matrix_common.c ****         print(": ");
 312               		.loc 1 73 9 discriminator 3 view .LVU44
 313               	.LBE18:
 314 003c 80E0      		ldi r24,lo8(__c.3860)
 315 003e 90E0      		ldi r25,hi8(__c.3860)
 316 0040 0E94 0000 		call xputs
 317               		.loc 1 74 9 discriminator 3 view .LVU45
 318               	.LBB19:
 319               	.LBI19:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 320               		.loc 1 38 21 discriminator 3 view .LVU46
 321               	.LBB20:
  44:quantum/matrix_common.c **** #endif
 322               		.loc 1 44 5 discriminator 3 view .LVU47
 323               	.LBE20:
 324               	.LBE19:
 325               		.loc 1 74 9 is_stmt 0 discriminator 3 view .LVU48
 326 0044 F701      		movw r30,r14
 327 0046 8191      		ld r24,Z+
 328 0048 9191      		ld r25,Z+
 329 004a 7F01      		movw r14,r30
 330 004c 0E94 0000 		call bitrev16
 331               	.LBB21:
 332               		.loc 1 74 9 is_stmt 1 discriminator 3 view .LVU49
 333               		.loc 1 74 9 discriminator 3 view .LVU50
 334               	.LBE21:
 335 0050 9F93      		push r25
 336               	.LCFI12:
 337               		.cfi_def_cfa_offset 15
 338 0052 8F93      		push r24
 339               	.LCFI13:
 340               		.cfi_def_cfa_offset 16
 341 0054 1F93      		push r17
 342               	.LCFI14:
 343               		.cfi_def_cfa_offset 17
 344 0056 0F93      		push r16
 345               	.LCFI15:
 346               		.cfi_def_cfa_offset 18
 347 0058 0E94 0000 		call __xprintf
  75:quantum/matrix_common.c ****         print("\n");
 348               		.loc 1 75 9 discriminator 3 view .LVU51
 349               	.LBB22:
 350               		.loc 1 75 9 discriminator 3 view .LVU52
 351               		.loc 1 75 9 discriminator 3 view .LVU53
 352               	.LBE22:
 353 005c 80E0      		ldi r24,lo8(__c.3864)
 354 005e 90E0      		ldi r25,hi8(__c.3864)
 355 0060 0E94 0000 		call xputs
  71:quantum/matrix_common.c ****         print_hex8(row);
 356               		.loc 1 71 46 discriminator 3 view .LVU54
  71:quantum/matrix_common.c ****         print_hex8(row);
 357               		.loc 1 71 27 discriminator 3 view .LVU55
 358 0064 2196      		adiw r28,1
  71:quantum/matrix_common.c ****         print_hex8(row);
 359               		.loc 1 71 5 is_stmt 0 discriminator 3 view .LVU56
 360 0066 8DB7      		in r24,__SP_L__
 361 0068 9EB7      		in r25,__SP_H__
 362 006a 0896      		adiw r24,8
 363 006c 0FB6      		in __tmp_reg__,__SREG__
 364 006e F894      		cli
 365 0070 9EBF      		out __SP_H__,r25
 366 0072 0FBE      		out __SREG__,__tmp_reg__
 367 0074 8DBF      		out __SP_L__,r24
 368               	.LCFI16:
 369               		.cfi_def_cfa_offset 10
 370 0076 C530      		cpi r28,5
 371 0078 D105      		cpc r29,__zero_reg__
 372 007a 01F4      		brne .L12
 373               	/* epilogue start */
 374               	.LBE23:
  76:quantum/matrix_common.c ****     }
  77:quantum/matrix_common.c **** }
 375               		.loc 1 77 1 view .LVU57
 376 007c DF91      		pop r29
 377 007e CF91      		pop r28
 378 0080 1F91      		pop r17
 379 0082 0F91      		pop r16
 380 0084 FF90      		pop r15
 381 0086 EF90      		pop r14
 382 0088 DF90      		pop r13
 383 008a CF90      		pop r12
 384 008c 0895      		ret
 385               		.cfi_endproc
 386               	.LFE33:
 388               		.section	.text.matrix_key_count,"ax",@progbits
 389               	.global	matrix_key_count
 391               	matrix_key_count:
 392               	.LFB34:
  78:quantum/matrix_common.c **** 
  79:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 393               		.loc 1 79 32 is_stmt 1 view -0
 394               		.cfi_startproc
 395 0000 0F93      		push r16
 396               	.LCFI17:
 397               		.cfi_def_cfa_offset 3
 398               		.cfi_offset 16, -2
 399 0002 1F93      		push r17
 400               	.LCFI18:
 401               		.cfi_def_cfa_offset 4
 402               		.cfi_offset 17, -3
 403 0004 CF93      		push r28
 404               	.LCFI19:
 405               		.cfi_def_cfa_offset 5
 406               		.cfi_offset 28, -4
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 3 */
 410               	.L__stack_usage = 3
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 411               		.loc 1 80 5 view .LVU59
 412               	.LVL7:
  81:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 413               		.loc 1 81 5 view .LVU60
 414               	.LBB24:
 415               		.loc 1 81 10 view .LVU61
 416               		.loc 1 81 25 view .LVU62
 417 0006 00E0      		ldi r16,lo8(matrix)
 418 0008 10E0      		ldi r17,hi8(matrix)
 419               	.LBE24:
  80:quantum/matrix_common.c ****     uint8_t count = 0;
 420               		.loc 1 80 13 is_stmt 0 view .LVU63
 421 000a C0E0      		ldi r28,0
 422               	.LVL8:
 423               	.L15:
 424               	.LBB27:
  82:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 425               		.loc 1 82 9 is_stmt 1 view .LVU64
 426               	.LBB25:
 427               	.LBI25:
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 428               		.loc 1 38 21 view .LVU65
 429               	.LBB26:
  44:quantum/matrix_common.c **** #endif
 430               		.loc 1 44 5 view .LVU66
 431               	.LBE26:
 432               	.LBE25:
 433               		.loc 1 82 18 is_stmt 0 view .LVU67
 434 000c F801      		movw r30,r16
 435 000e 8191      		ld r24,Z+
 436 0010 9191      		ld r25,Z+
 437 0012 8F01      		movw r16,r30
 438 0014 0E94 0000 		call bitpop16
 439               	.LVL9:
 440               		.loc 1 82 15 view .LVU68
 441 0018 C80F      		add r28,r24
 442               	.LVL10:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 443               		.loc 1 81 42 is_stmt 1 view .LVU69
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 444               		.loc 1 81 25 view .LVU70
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 445               		.loc 1 81 5 is_stmt 0 view .LVU71
 446 001a F0E0      		ldi r31,hi8(matrix+10)
 447 001c 0030      		cpi r16,lo8(matrix+10)
 448 001e 1F07      		cpc r17,r31
 449 0020 01F4      		brne .L15
 450               	.LBE27:
  83:quantum/matrix_common.c ****     }
  84:quantum/matrix_common.c ****     return count;
 451               		.loc 1 84 5 is_stmt 1 view .LVU72
  85:quantum/matrix_common.c **** }
 452               		.loc 1 85 1 is_stmt 0 view .LVU73
 453 0022 8C2F      		mov r24,r28
 454               	/* epilogue start */
 455 0024 CF91      		pop r28
 456               	.LVL11:
 457               		.loc 1 85 1 view .LVU74
 458 0026 1F91      		pop r17
 459 0028 0F91      		pop r16
 460 002a 0895      		ret
 461               		.cfi_endproc
 462               	.LFE34:
 464               		.section	.text.matrix_io_delay,"ax",@progbits
 465               		.weak	matrix_io_delay
 467               	matrix_io_delay:
 468               	.LFB35:
  86:quantum/matrix_common.c **** 
  87:quantum/matrix_common.c **** /*　`matrix_io_delay ()` exists for backwards compatibility. From now on, use matrix_output_unsele
  88:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 469               		.loc 1 88 50 is_stmt 1 view -0
 470               		.cfi_startproc
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 475               		.loc 1 88 52 view .LVU76
 476               	.LVL12:
 477               	.LBB28:
 478               	.LBI28:
 479               		.file 2 "e:\\game\\msys2\\mingw64\\avr\\include\\util\\delay.h"
   1:e:\game\msys2\mingw64\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:e:\game\msys2\mingw64\avr\include\util\delay.h ****    All rights reserved.
   5:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
   6:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:e:\game\msys2\mingw64\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
   9:e:\game\msys2\mingw64\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:e:\game\msys2\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  12:e:\game\msys2\mingw64\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:e:\game\msys2\mingw64\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:e:\game\msys2\mingw64\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:e:\game\msys2\mingw64\avr\include\util\delay.h ****      distribution.
  16:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  17:e:\game\msys2\mingw64\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:e:\game\msys2\mingw64\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:e:\game\msys2\mingw64\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  21:e:\game\msys2\mingw64\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:e:\game\msys2\mingw64\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:e:\game\msys2\mingw64\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:e:\game\msys2\mingw64\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:e:\game\msys2\mingw64\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:e:\game\msys2\mingw64\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:e:\game\msys2\mingw64\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:e:\game\msys2\mingw64\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:e:\game\msys2\mingw64\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:e:\game\msys2\mingw64\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:e:\game\msys2\mingw64\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  33:e:\game\msys2\mingw64\avr\include\util\delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  35:e:\game\msys2\mingw64\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:e:\game\msys2\mingw64\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  38:e:\game\msys2\mingw64\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:e:\game\msys2\mingw64\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:e:\game\msys2\mingw64\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:e:\game\msys2\mingw64\avr\include\util\delay.h **** #  endif
  42:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  44:e:\game\msys2\mingw64\avr\include\util\delay.h **** #include <inttypes.h>
  45:e:\game\msys2\mingw64\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:e:\game\msys2\mingw64\avr\include\util\delay.h **** #include <math.h>
  47:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  48:e:\game\msys2\mingw64\avr\include\util\delay.h **** /** \file */
  49:e:\game\msys2\mingw64\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \code
  51:e:\game\msys2\mingw64\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:e:\game\msys2\mingw64\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:e:\game\msys2\mingw64\avr\include\util\delay.h ****     #include <util/delay.h>
  54:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \endcode
  55:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  56:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:e:\game\msys2\mingw64\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:e:\game\msys2\mingw64\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:e:\game\msys2\mingw64\avr\include\util\delay.h ****     used.
  60:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  61:e:\game\msys2\mingw64\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:e:\game\msys2\mingw64\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:e:\game\msys2\mingw64\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:e:\game\msys2\mingw64\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:e:\game\msys2\mingw64\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:e:\game\msys2\mingw64\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:e:\game\msys2\mingw64\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:e:\game\msys2\mingw64\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  70:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:e:\game\msys2\mingw64\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:e:\game\msys2\mingw64\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:e:\game\msys2\mingw64\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:e:\game\msys2\mingw64\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:e:\game\msys2\mingw64\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:e:\game\msys2\mingw64\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:e:\game\msys2\mingw64\avr\include\util\delay.h ****     routines linked into the application.
  78:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  79:e:\game\msys2\mingw64\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:e:\game\msys2\mingw64\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:e:\game\msys2\mingw64\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  83:e:\game\msys2\mingw64\avr\include\util\delay.h **** */
  84:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  85:e:\game\msys2\mingw64\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:e:\game\msys2\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:e:\game\msys2\mingw64\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif
  89:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  90:e:\game\msys2\mingw64\avr\include\util\delay.h **** #ifndef F_CPU
  91:e:\game\msys2\mingw64\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:e:\game\msys2\mingw64\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:e:\game\msys2\mingw64\avr\include\util\delay.h **** /** \ingroup util_delay
  94:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \def F_CPU
  95:e:\game\msys2\mingw64\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
  97:e:\game\msys2\mingw64\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:e:\game\msys2\mingw64\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:e:\game\msys2\mingw64\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:e:\game\msys2\mingw64\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:e:\game\msys2\mingw64\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 103:e:\game\msys2\mingw64\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:e:\game\msys2\mingw64\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:e:\game\msys2\mingw64\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:e:\game\msys2\mingw64\avr\include\util\delay.h ****     integer value.
 107:e:\game\msys2\mingw64\avr\include\util\delay.h ****  */
 108:e:\game\msys2\mingw64\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif
 110:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 111:e:\game\msys2\mingw64\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:e:\game\msys2\mingw64\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif
 114:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 115:e:\game\msys2\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:e:\game\msys2\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:e:\game\msys2\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:e:\game\msys2\mingw64\avr\include\util\delay.h **** #  include <math.h>
 119:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif
 120:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 121:e:\game\msys2\mingw64\avr\include\util\delay.h **** /**
 122:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 123:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 124:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 126:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:e:\game\msys2\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 129:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 131:e:\game\msys2\mingw64\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:e:\game\msys2\mingw64\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:e:\game\msys2\mingw64\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:e:\game\msys2\mingw64\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:e:\game\msys2\mingw64\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 137:e:\game\msys2\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:e:\game\msys2\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:e:\game\msys2\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:e:\game\msys2\mingw64\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 142:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:e:\game\msys2\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:e:\game\msys2\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:e:\game\msys2\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 146:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 147:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:e:\game\msys2\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:e:\game\msys2\mingw64\avr\include\util\delay.h ****    respectively.
 151:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 152:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \note
 153:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 154:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:e:\game\msys2\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:e:\game\msys2\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:e:\game\msys2\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:e:\game\msys2\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:e:\game\msys2\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:e:\game\msys2\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:e:\game\msys2\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 163:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 164:e:\game\msys2\mingw64\avr\include\util\delay.h ****  */
 165:e:\game\msys2\mingw64\avr\include\util\delay.h **** void
 166:e:\game\msys2\mingw64\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:e:\game\msys2\mingw64\avr\include\util\delay.h **** {
 168:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 169:e:\game\msys2\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:e:\game\msys2\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:e:\game\msys2\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 176:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 179:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 182:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#else
 183:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		//round up by default
 184:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#endif
 186:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 187:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 189:e:\game\msys2\mingw64\avr\include\util\delay.h **** #else
 190:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks = 1;
 194:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	{
 196:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		while(__ticks)
 199:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		{
 200:e:\game\msys2\mingw64\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:e:\game\msys2\mingw64\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:e:\game\msys2\mingw64\avr\include\util\delay.h **** 			__ticks --;
 203:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		}
 204:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		return;
 205:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	}
 206:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	else
 207:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:e:\game\msys2\mingw64\avr\include\util\delay.h **** #endif
 210:e:\game\msys2\mingw64\avr\include\util\delay.h **** }
 211:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 212:e:\game\msys2\mingw64\avr\include\util\delay.h **** /**
 213:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \ingroup util_delay
 214:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 215:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 217:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:e:\game\msys2\mingw64\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 220:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 222:e:\game\msys2\mingw64\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:e:\game\msys2\mingw64\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:e:\game\msys2\mingw64\avr\include\util\delay.h ****    will not be informed about this case.
 225:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 226:e:\game\msys2\mingw64\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:e:\game\msys2\mingw64\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:e:\game\msys2\mingw64\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:e:\game\msys2\mingw64\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 231:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:e:\game\msys2\mingw64\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:e:\game\msys2\mingw64\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:e:\game\msys2\mingw64\avr\include\util\delay.h ****    microseconds of delay.
 235:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 236:e:\game\msys2\mingw64\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:e:\game\msys2\mingw64\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:e:\game\msys2\mingw64\avr\include\util\delay.h ****    respectively.
 240:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 241:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \note
 242:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 243:e:\game\msys2\mingw64\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:e:\game\msys2\mingw64\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:e:\game\msys2\mingw64\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:e:\game\msys2\mingw64\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:e:\game\msys2\mingw64\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:e:\game\msys2\mingw64\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:e:\game\msys2\mingw64\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:e:\game\msys2\mingw64\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:e:\game\msys2\mingw64\avr\include\util\delay.h ****    not available to the compiler then.
 252:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 253:e:\game\msys2\mingw64\avr\include\util\delay.h ****  */
 254:e:\game\msys2\mingw64\avr\include\util\delay.h **** void
 255:e:\game\msys2\mingw64\avr\include\util\delay.h **** _delay_us(double __us)
 480               		.loc 2 255 1 view .LVU77
 481               	.LBB29:
 256:e:\game\msys2\mingw64\avr\include\util\delay.h **** {
 257:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	double __tmp ;
 482               		.loc 2 257 2 view .LVU78
 258:e:\game\msys2\mingw64\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:e:\game\msys2\mingw64\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:e:\game\msys2\mingw64\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 483               		.loc 2 261 2 view .LVU79
 262:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 484               		.loc 2 262 2 view .LVU80
 263:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 485               		.loc 2 263 2 view .LVU81
 264:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 265:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 268:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 271:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#else
 272:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		//round up by default
 273:e:\game\msys2\mingw64\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 486               		.loc 2 273 3 view .LVU82
 274:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	#endif
 275:e:\game\msys2\mingw64\avr\include\util\delay.h **** 
 276:e:\game\msys2\mingw64\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 487               		.loc 2 276 2 view .LVU83
 488 0000 80EA      		ldi r24,lo8(-96)
 489 0002 8A95      	1:	dec r24
 490 0004 01F4      		brne 1b
 491               	.LVL13:
 492               	/* epilogue start */
 493               		.loc 2 276 2 is_stmt 0 view .LVU84
 494               	.LBE29:
 495               	.LBE28:
 496               		.loc 1 88 1 view .LVU85
 497 0006 0895      		ret
 498               		.cfi_endproc
 499               	.LFE35:
 501               		.section	.text.matrix_output_select_delay,"ax",@progbits
 502               		.weak	matrix_output_select_delay
 504               	matrix_output_select_delay:
 505               	.LFB36:
  89:quantum/matrix_common.c **** 
  90:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_select_delay(void) { waitInputPinDelay(); }
 506               		.loc 1 90 61 is_stmt 1 view -0
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 512               		.loc 1 90 63 view .LVU87
 513 0000 00C0      		rjmp .
 514               	/* epilogue start */
 515               		.loc 1 90 1 is_stmt 0 view .LVU88
 516 0002 0895      		ret
 517               		.cfi_endproc
 518               	.LFE36:
 520               		.section	.text.matrix_output_unselect_delay,"ax",@progbits
 521               		.weak	matrix_output_unselect_delay
 523               	matrix_output_unselect_delay:
 524               	.LFB37:
  91:quantum/matrix_common.c **** __attribute__((weak)) void matrix_output_unselect_delay(void) { matrix_io_delay(); }
 525               		.loc 1 91 63 is_stmt 1 view -0
 526               		.cfi_startproc
 527               	/* prologue: function */
 528               	/* frame size = 0 */
 529               	/* stack size = 0 */
 530               	.L__stack_usage = 0
 531               		.loc 1 91 65 view .LVU90
 532 0000 0C94 0000 		jmp matrix_io_delay
 533               	.LVL14:
 534               		.cfi_endproc
 535               	.LFE37:
 537               		.section	.text.matrix_init_custom,"ax",@progbits
 538               		.weak	matrix_init_custom
 540               	matrix_init_custom:
 541               	.LFB46:
 542               		.cfi_startproc
 543               	/* prologue: function */
 544               	/* frame size = 0 */
 545               	/* stack size = 0 */
 546               	.L__stack_usage = 0
 547               	/* epilogue start */
 548 0000 0895      		ret
 549               		.cfi_endproc
 550               	.LFE46:
 552               		.section	.text.matrix_scan_custom,"ax",@progbits
 553               		.weak	matrix_scan_custom
 555               	matrix_scan_custom:
 556               	.LVL15:
 557               	.LFB39:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  94:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 558               		.loc 1 96 78 view -0
 559               		.cfi_startproc
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 0 */
 563               	.L__stack_usage = 0
 564               		.loc 1 96 80 view .LVU92
 565               		.loc 1 96 1 is_stmt 0 view .LVU93
 566 0000 81E0      		ldi r24,lo8(1)
 567               	.LVL16:
 568               	/* epilogue start */
 569               		.loc 1 96 1 view .LVU94
 570 0002 0895      		ret
 571               		.cfi_endproc
 572               	.LFE39:
 574               		.section	.text.matrix_init,"ax",@progbits
 575               		.weak	matrix_init
 577               	matrix_init:
 578               	.LFB40:
  97:quantum/matrix_common.c **** 
  98:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 579               		.loc 1 98 46 is_stmt 1 view -0
 580               		.cfi_startproc
 581               	/* prologue: function */
 582               	/* frame size = 0 */
 583               	/* stack size = 0 */
 584               	.L__stack_usage = 0
  99:quantum/matrix_common.c ****     matrix_init_custom();
 585               		.loc 1 99 5 view .LVU96
 586 0000 0E94 0000 		call matrix_init_custom
 587               	.LVL17:
 100:quantum/matrix_common.c **** 
 101:quantum/matrix_common.c ****     // initialize matrix state: all keys off
 102:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 588               		.loc 1 102 5 view .LVU97
 589               	.LBB30:
 590               		.loc 1 102 10 view .LVU98
 591               		.loc 1 102 25 view .LVU99
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 592               		.loc 1 103 9 view .LVU100
 593               		.loc 1 103 23 is_stmt 0 view .LVU101
 594 0004 A0E0      		ldi r26,lo8(raw_matrix)
 595 0006 B0E0      		ldi r27,hi8(raw_matrix)
 596 0008 1196      		adiw r26,1
 597 000a 1C92      		st X,__zero_reg__
 598 000c 1E92      		st -X,__zero_reg__
 104:quantum/matrix_common.c ****         matrix[i]     = 0;
 599               		.loc 1 104 9 is_stmt 1 view .LVU102
 600               		.loc 1 104 23 is_stmt 0 view .LVU103
 601 000e E0E0      		ldi r30,lo8(matrix)
 602 0010 F0E0      		ldi r31,hi8(matrix)
 603 0012 1182      		std Z+1,__zero_reg__
 604 0014 1082      		st Z,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 605               		.loc 1 102 42 is_stmt 1 view .LVU104
 606               	.LVL18:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 607               		.loc 1 102 25 view .LVU105
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 608               		.loc 1 103 9 view .LVU106
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 609               		.loc 1 103 23 is_stmt 0 view .LVU107
 610 0016 1396      		adiw r26,2+1
 611 0018 1C92      		st X,__zero_reg__
 612 001a 1E92      		st -X,__zero_reg__
 613 001c 1297      		sbiw r26,2
 614               		.loc 1 104 9 is_stmt 1 view .LVU108
 615               		.loc 1 104 23 is_stmt 0 view .LVU109
 616 001e 1382      		std Z+3,__zero_reg__
 617 0020 1282      		std Z+2,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 618               		.loc 1 102 42 is_stmt 1 view .LVU110
 619               	.LVL19:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 620               		.loc 1 102 25 view .LVU111
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 621               		.loc 1 103 9 view .LVU112
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 622               		.loc 1 103 23 is_stmt 0 view .LVU113
 623 0022 1596      		adiw r26,4+1
 624 0024 1C92      		st X,__zero_reg__
 625 0026 1E92      		st -X,__zero_reg__
 626 0028 1497      		sbiw r26,4
 627               		.loc 1 104 9 is_stmt 1 view .LVU114
 628               		.loc 1 104 23 is_stmt 0 view .LVU115
 629 002a 1582      		std Z+5,__zero_reg__
 630 002c 1482      		std Z+4,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 631               		.loc 1 102 42 is_stmt 1 view .LVU116
 632               	.LVL20:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 633               		.loc 1 102 25 view .LVU117
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 634               		.loc 1 103 9 view .LVU118
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 635               		.loc 1 103 23 is_stmt 0 view .LVU119
 636 002e 1796      		adiw r26,6+1
 637 0030 1C92      		st X,__zero_reg__
 638 0032 1E92      		st -X,__zero_reg__
 639 0034 1697      		sbiw r26,6
 640               		.loc 1 104 9 is_stmt 1 view .LVU120
 641               		.loc 1 104 23 is_stmt 0 view .LVU121
 642 0036 1782      		std Z+7,__zero_reg__
 643 0038 1682      		std Z+6,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 644               		.loc 1 102 42 is_stmt 1 view .LVU122
 645               	.LVL21:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 646               		.loc 1 102 25 view .LVU123
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 647               		.loc 1 103 9 view .LVU124
 103:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 648               		.loc 1 103 23 is_stmt 0 view .LVU125
 649 003a 1996      		adiw r26,8+1
 650 003c 1C92      		st X,__zero_reg__
 651 003e 1E92      		st -X,__zero_reg__
 652 0040 1897      		sbiw r26,8
 653               		.loc 1 104 9 is_stmt 1 view .LVU126
 654               		.loc 1 104 23 is_stmt 0 view .LVU127
 655 0042 1186      		std Z+9,__zero_reg__
 656 0044 1086      		std Z+8,__zero_reg__
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 657               		.loc 1 102 42 is_stmt 1 view .LVU128
 658               	.LVL22:
 102:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 659               		.loc 1 102 25 view .LVU129
 660               	.LBE30:
 105:quantum/matrix_common.c ****     }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 661               		.loc 1 107 5 view .LVU130
 662 0046 85E0      		ldi r24,lo8(5)
 663 0048 0E94 0000 		call debounce_init
 664               	.LVL23:
 108:quantum/matrix_common.c **** 
 109:quantum/matrix_common.c ****     matrix_init_quantum();
 665               		.loc 1 109 5 view .LVU131
 666 004c 0C94 0000 		jmp matrix_init_quantum
 667               	.LVL24:
 668               		.cfi_endproc
 669               	.LFE40:
 671               		.section	.text.matrix_scan,"ax",@progbits
 672               		.weak	matrix_scan
 674               	matrix_scan:
 675               	.LFB41:
 110:quantum/matrix_common.c **** }
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 676               		.loc 1 112 49 view -0
 677               		.cfi_startproc
 678 0000 CF93      		push r28
 679               	.LCFI20:
 680               		.cfi_def_cfa_offset 3
 681               		.cfi_offset 28, -2
 682               	/* prologue: function */
 683               	/* frame size = 0 */
 684               	/* stack size = 1 */
 685               	.L__stack_usage = 1
 113:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 686               		.loc 1 113 5 view .LVU133
 687               		.loc 1 113 20 is_stmt 0 view .LVU134
 688 0002 80E0      		ldi r24,lo8(raw_matrix)
 689 0004 90E0      		ldi r25,hi8(raw_matrix)
 690 0006 0E94 0000 		call matrix_scan_custom
 691               	.LVL25:
 692 000a C82F      		mov r28,r24
 693               	.LVL26:
 114:quantum/matrix_common.c **** 
 115:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 694               		.loc 1 115 5 is_stmt 1 view .LVU135
 695 000c 282F      		mov r18,r24
 696 000e 45E0      		ldi r20,lo8(5)
 697 0010 60E0      		ldi r22,lo8(matrix)
 698 0012 70E0      		ldi r23,hi8(matrix)
 699 0014 80E0      		ldi r24,lo8(raw_matrix)
 700 0016 90E0      		ldi r25,hi8(raw_matrix)
 701               	.LVL27:
 702               		.loc 1 115 5 is_stmt 0 view .LVU136
 703 0018 0E94 0000 		call debounce
 704               	.LVL28:
 116:quantum/matrix_common.c **** 
 117:quantum/matrix_common.c ****     matrix_scan_quantum();
 705               		.loc 1 117 5 is_stmt 1 view .LVU137
 706 001c 0E94 0000 		call matrix_scan_quantum
 707               	.LVL29:
 118:quantum/matrix_common.c ****     return changed;
 708               		.loc 1 118 5 view .LVU138
 119:quantum/matrix_common.c **** }
 709               		.loc 1 119 1 is_stmt 0 view .LVU139
 710 0020 8C2F      		mov r24,r28
 711               	/* epilogue start */
 712 0022 CF91      		pop r28
 713               	.LVL30:
 714               		.loc 1 119 1 view .LVU140
 715 0024 0895      		ret
 716               		.cfi_endproc
 717               	.LFE41:
 719               		.section	.text.peek_matrix,"ax",@progbits
 720               		.weak	peek_matrix
 722               	peek_matrix:
 723               	.LVL31:
 724               	.LFB42:
 120:quantum/matrix_common.c **** 
 121:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 725               		.loc 1 121 88 is_stmt 1 view -0
 726               		.cfi_startproc
 727               	/* prologue: function */
 728               	/* frame size = 0 */
 729               	/* stack size = 0 */
 730               	.L__stack_usage = 0
 731               		.loc 1 121 90 view .LVU142
 732 0000 90E0      		ldi r25,0
 733 0002 880F      		lsl r24
 734 0004 991F      		rol r25
 735               	.LVL32:
 736               		.loc 1 121 132 is_stmt 0 view .LVU143
 737 0006 4423      		tst r20
 738 0008 01F0      		breq .L25
 739               		.loc 1 121 132 discriminator 1 view .LVU144
 740 000a 8050      		subi r24,lo8(-(raw_matrix))
 741 000c 9040      		sbci r25,hi8(-(raw_matrix))
 742               	.L28:
 743               		.loc 1 121 132 discriminator 2 view .LVU145
 744 000e FC01      		movw r30,r24
 745 0010 8081      		ld r24,Z
 746 0012 9181      		ldd r25,Z+1
 747               		.loc 1 121 175 discriminator 2 view .LVU146
 748 0014 21E0      		ldi r18,lo8(1)
 749 0016 30E0      		ldi r19,0
 750 0018 00C0      		rjmp 2f
 751               		1:
 752 001a 220F      		lsl r18
 753 001c 331F      		rol r19
 754               		2:
 755 001e 6A95      		dec r22
 756 0020 02F4      		brpl 1b
 757               		.loc 1 121 153 discriminator 2 view .LVU147
 758 0022 2823      		and r18,r24
 759 0024 3923      		and r19,r25
 760               		.loc 1 121 99 discriminator 2 view .LVU148
 761 0026 81E0      		ldi r24,lo8(1)
 762 0028 232B      		or r18,r19
 763 002a 01F4      		brne .L27
 764               		.loc 1 121 99 discriminator 4 view .LVU149
 765 002c 80E0      		ldi r24,0
 766               	.L27:
 767               	/* epilogue start */
 768               		.loc 1 121 1 discriminator 4 view .LVU150
 769 002e 0895      		ret
 770               	.L25:
 771               		.loc 1 121 132 discriminator 2 view .LVU151
 772 0030 8050      		subi r24,lo8(-(matrix))
 773 0032 9040      		sbci r25,hi8(-(matrix))
 774 0034 00C0      		rjmp .L28
 775               		.cfi_endproc
 776               	.LFE42:
 778               		.section	.progmem.data.__c.3864,"a"
 781               	__c.3864:
 782 0000 0A00      		.string	"\n"
 783               		.section	.progmem.data.__c.3862,"a"
 786               	__c.3862:
 787 0000 2530 3136 		.string	"%016b"
 787      6200 
 788               		.section	.progmem.data.__c.3860,"a"
 791               	__c.3860:
 792 0000 3A20 00   		.string	": "
 793               		.section	.progmem.data.__c.3858,"a"
 796               	__c.3858:
 797 0000 2530 3258 		.string	"%02X"
 797      00
 798               		.section	.progmem.data.__c.3855,"a"
 801               	__c.3855:
 802 0000 0A72 2F63 		.string	"\nr/c 0123456789ABCDEF\n"
 802      2030 3132 
 802      3334 3536 
 802      3738 3941 
 802      4243 4445 
 803               		.comm	matrix,10,1
 804               		.comm	raw_matrix,10,1
 805               		.text
 806               	.Letext0:
 807               		.file 3 "e:\\game\\msys2\\mingw64\\avr\\include\\stdint.h"
 808               		.file 4 "e:\\game\\msys2\\mingw64\\lib\\gcc\\avr\\8.4.0\\include\\stddef.h"
 809               		.file 5 "quantum/matrix.h"
 810               		.file 6 "tmk_core/common/report.h"
 811               		.file 7 "tmk_core/common/action.h"
 812               		.file 8 "tmk_core/common/host.h"
 813               		.file 9 "tmk_core/common/avr/xprintf.h"
 814               		.file 10 "tmk_core/common/debug.h"
 815               		.file 11 "quantum/keycode_config.h"
 816               		.file 12 "tmk_core/common/timer.h"
 817               		.file 13 "quantum/sequencer/sequencer.h"
 818               		.file 14 "quantum/keymap.h"
 819               		.file 15 "tmk_core/common/action_layer.h"
 820               		.file 16 "tmk_core/common/action_util.h"
 821               		.file 17 "quantum/send_string.h"
 822               		.file 18 "e:\\game\\msys2\\mingw64\\avr\\include\\stdlib.h"
 823               		.file 19 "quantum/debounce.h"
 824               		.file 20 "quantum/bitwise.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:2      *ABS*:000000000000003e __SP_H__
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:3      *ABS*:000000000000003d __SP_L__
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:4      *ABS*:000000000000003f __SREG__
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:5      *ABS*:0000000000000000 __tmp_reg__
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:6      *ABS*:0000000000000001 __zero_reg__
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:50     .text.matrix_scan_user:0000000000000000 matrix_scan_user
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:65     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:82     .text.matrix_rows:0000000000000000 matrix_rows
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:101    .text.matrix_cols:0000000000000000 matrix_cols
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:120    .text.matrix_is_on:0000000000000000 matrix_is_on
                            *COM*:000000000000000a matrix
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:168    .text.matrix_get_row:0000000000000000 matrix_get_row
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:198    .text.matrix_is_modified:0000000000000000 matrix_is_modified
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:221    .text.matrix_print:0000000000000000 matrix_print
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:801    .progmem.data.__c.3855:0000000000000000 __c.3855
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:796    .progmem.data.__c.3858:0000000000000000 __c.3858
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:786    .progmem.data.__c.3862:0000000000000000 __c.3862
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:791    .progmem.data.__c.3860:0000000000000000 __c.3860
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:781    .progmem.data.__c.3864:0000000000000000 __c.3864
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:391    .text.matrix_key_count:0000000000000000 matrix_key_count
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:467    .text.matrix_io_delay:0000000000000000 matrix_io_delay
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:504    .text.matrix_output_select_delay:0000000000000000 matrix_output_select_delay
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:523    .text.matrix_output_unselect_delay:0000000000000000 matrix_output_unselect_delay
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:540    .text.matrix_init_custom:0000000000000000 matrix_init_custom
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:555    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:577    .text.matrix_init:0000000000000000 matrix_init
                            *COM*:000000000000000a raw_matrix
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:674    .text.matrix_scan:0000000000000000 matrix_scan
C:\Users\Roningo\AppData\Local\Temp\ccOEI3t4.s:722    .text.peek_matrix:0000000000000000 peek_matrix

UNDEFINED SYMBOLS
debounce_active
xputs
__xprintf
bitrev16
bitpop16
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
